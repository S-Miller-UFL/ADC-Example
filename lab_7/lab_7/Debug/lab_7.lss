
lab_7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00802000  00000bb6  00000c4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00802002  00802002  00000c4c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005302  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003cf3  00000000  00000000  00006006  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000833  00000000  00000000  00009cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  0000a52c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000445d  00000000  00000000  0000a628  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e3  00000000  00000000  0000ea85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000ec68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__vector_71>
 120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e6 eb       	ldi	r30, 0xB6	; 182
 21c:	fb e0       	ldi	r31, 0x0B	; 11
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a2 30       	cpi	r26, 0x02	; 2
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	20 e2       	ldi	r18, 0x20	; 32
 232:	a2 e0       	ldi	r26, 0x02	; 2
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a5 30       	cpi	r26, 0x05	; 5
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 26 01 	call	0x24c	; 0x24c <main>
 244:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <main>:
volatile int16_t result;
volatile int8_t bsel = 5;
volatile int8_t bscale = -6;
volatile uint8_t adca_ready;
int main(void)
{
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
 254:	2f 97       	sbiw	r28, 0x0f	; 15
 256:	cd bf       	out	0x3d, r28	; 61
 258:	de bf       	out	0x3e, r29	; 62
 	uint8_t int1 = 0;
 25a:	19 82       	std	Y+1, r1	; 0x01
	uint8_t int2 = 0;
 25c:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t int3 = 0;
 25e:	1b 82       	std	Y+3, r1	; 0x03
	float result2 =0;
 260:	1c 82       	std	Y+4, r1	; 0x04
 262:	1d 82       	std	Y+5, r1	; 0x05
 264:	1e 82       	std	Y+6, r1	; 0x06
 266:	1f 82       	std	Y+7, r1	; 0x07
	float result3 =0;
 268:	18 86       	std	Y+8, r1	; 0x08
 26a:	19 86       	std	Y+9, r1	; 0x09
 26c:	1a 86       	std	Y+10, r1	; 0x0a
 26e:	1b 86       	std	Y+11, r1	; 0x0b
	//initialize ADC
	adc_init();
 270:	0e 94 39 03 	call	0x672	; 0x672 <adc_init>
	//initialize tcc0
	tcc0_init();
 274:	0e 94 8c 03 	call	0x718	; 0x718 <tcc0_init>
	//initialize interrupts
	inter_init();
 278:	0e 94 7e 03 	call	0x6fc	; 0x6fc <inter_init>
	//initialize usartd0
	usartd0_init();
 27c:	0e 94 b4 03 	call	0x768	; 0x768 <usartd0_init>
	//start timer counter
	TCC0.CTRLA = TC_CLKSEL_DIV1024_gc;
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	98 e0       	ldi	r25, 0x08	; 8
 284:	27 e0       	ldi	r18, 0x07	; 7
 286:	fc 01       	movw	r30, r24
 288:	20 83       	st	Z, r18
	while (1)
	{
		if(adca_ready)
 28a:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <__data_end>
 28e:	88 23       	and	r24, r24
 290:	e1 f3       	breq	.-8      	; 0x28a <main+0x3e>
			
			////////////////////////////////////
			/*OUTPUT VOLTAGE IN DECIMAL VALUE*/
			////////////////////////////////////
			//output positive or negative sign
			if(result < 0)
 292:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <result>
 296:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <result+0x1>
 29a:	99 23       	and	r25, r25
 29c:	e4 f4       	brge	.+56     	; 0x2d6 <main+0x8a>
			{
				result = result*-1;
 29e:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <result>
 2a2:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <result+0x1>
 2a6:	91 95       	neg	r25
 2a8:	81 95       	neg	r24
 2aa:	91 09       	sbc	r25, r1
 2ac:	80 93 03 20 	sts	0x2003, r24	; 0x802003 <result>
 2b0:	90 93 04 20 	sts	0x2004, r25	; 0x802004 <result+0x1>
				USARTD0.DATA = '-';
 2b4:	80 ea       	ldi	r24, 0xA0	; 160
 2b6:	99 e0       	ldi	r25, 0x09	; 9
 2b8:	2d e2       	ldi	r18, 0x2D	; 45
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 83       	st	Z, r18
				while(!(USARTD0.STATUS & USART_DREIF_bm))
 2be:	00 00       	nop
 2c0:	80 ea       	ldi	r24, 0xA0	; 160
 2c2:	99 e0       	ldi	r25, 0x09	; 9
 2c4:	fc 01       	movw	r30, r24
 2c6:	81 81       	ldd	r24, Z+1	; 0x01
 2c8:	88 2f       	mov	r24, r24
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	80 72       	andi	r24, 0x20	; 32
 2ce:	99 27       	eor	r25, r25
 2d0:	89 2b       	or	r24, r25
 2d2:	b1 f3       	breq	.-20     	; 0x2c0 <main+0x74>
 2d4:	17 c0       	rjmp	.+46     	; 0x304 <main+0xb8>
				{
					//do nothing
				}
			}
			else if(result > 0)
 2d6:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <result>
 2da:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <result+0x1>
 2de:	18 16       	cp	r1, r24
 2e0:	19 06       	cpc	r1, r25
 2e2:	84 f4       	brge	.+32     	; 0x304 <main+0xb8>
			{
				USARTD0.DATA = '+';
 2e4:	80 ea       	ldi	r24, 0xA0	; 160
 2e6:	99 e0       	ldi	r25, 0x09	; 9
 2e8:	2b e2       	ldi	r18, 0x2B	; 43
 2ea:	fc 01       	movw	r30, r24
 2ec:	20 83       	st	Z, r18
				while(!(USARTD0.STATUS & USART_DREIF_bm))
 2ee:	00 00       	nop
 2f0:	80 ea       	ldi	r24, 0xA0	; 160
 2f2:	99 e0       	ldi	r25, 0x09	; 9
 2f4:	fc 01       	movw	r30, r24
 2f6:	81 81       	ldd	r24, Z+1	; 0x01
 2f8:	88 2f       	mov	r24, r24
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	80 72       	andi	r24, 0x20	; 32
 2fe:	99 27       	eor	r25, r25
 300:	89 2b       	or	r24, r25
 302:	b1 f3       	breq	.-20     	; 0x2f0 <main+0xa4>
				{
					//do nothing
				}
			}
			//convert to voltage value
			float result_flt = (result*resolution)+(intercept);
 304:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <result>
 308:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <result+0x1>
 30c:	09 2e       	mov	r0, r25
 30e:	00 0c       	add	r0, r0
 310:	aa 0b       	sbc	r26, r26
 312:	bb 0b       	sbc	r27, r27
 314:	bc 01       	movw	r22, r24
 316:	cd 01       	movw	r24, r26
 318:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__floatsisf>
 31c:	dc 01       	movw	r26, r24
 31e:	cb 01       	movw	r24, r22
 320:	28 e6       	ldi	r18, 0x68	; 104
 322:	38 ee       	ldi	r19, 0xE8	; 232
 324:	4f e9       	ldi	r20, 0x9F	; 159
 326:	5a e3       	ldi	r21, 0x3A	; 58
 328:	bc 01       	movw	r22, r24
 32a:	cd 01       	movw	r24, r26
 32c:	0e 94 6c 05 	call	0xad8	; 0xad8 <__mulsf3>
 330:	dc 01       	movw	r26, r24
 332:	cb 01       	movw	r24, r22
 334:	28 e6       	ldi	r18, 0x68	; 104
 336:	38 ee       	ldi	r19, 0xE8	; 232
 338:	4f e1       	ldi	r20, 0x1F	; 31
 33a:	5a e3       	ldi	r21, 0x3A	; 58
 33c:	bc 01       	movw	r22, r24
 33e:	cd 01       	movw	r24, r26
 340:	0e 94 43 04 	call	0x886	; 0x886 <__addsf3>
 344:	dc 01       	movw	r26, r24
 346:	cb 01       	movw	r24, r22
 348:	8c 87       	std	Y+12, r24	; 0x0c
 34a:	9d 87       	std	Y+13, r25	; 0x0d
 34c:	ae 87       	std	Y+14, r26	; 0x0e
 34e:	bf 87       	std	Y+15, r27	; 0x0f
			
			//get first digit and transmit
			int1 = (uint8_t)(result_flt);
 350:	6c 85       	ldd	r22, Y+12	; 0x0c
 352:	7d 85       	ldd	r23, Y+13	; 0x0d
 354:	8e 85       	ldd	r24, Y+14	; 0x0e
 356:	9f 85       	ldd	r25, Y+15	; 0x0f
 358:	0e 94 af 04 	call	0x95e	; 0x95e <__fixunssfsi>
 35c:	dc 01       	movw	r26, r24
 35e:	cb 01       	movw	r24, r22
 360:	89 83       	std	Y+1, r24	; 0x01
			USARTD0.DATA = (int1+48);
 362:	80 ea       	ldi	r24, 0xA0	; 160
 364:	99 e0       	ldi	r25, 0x09	; 9
 366:	29 81       	ldd	r18, Y+1	; 0x01
 368:	20 5d       	subi	r18, 0xD0	; 208
 36a:	fc 01       	movw	r30, r24
 36c:	20 83       	st	Z, r18
			while(!(USARTD0.STATUS & USART_DREIF_bm))
 36e:	00 00       	nop
 370:	80 ea       	ldi	r24, 0xA0	; 160
 372:	99 e0       	ldi	r25, 0x09	; 9
 374:	fc 01       	movw	r30, r24
 376:	81 81       	ldd	r24, Z+1	; 0x01
 378:	88 2f       	mov	r24, r24
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	80 72       	andi	r24, 0x20	; 32
 37e:	99 27       	eor	r25, r25
 380:	89 2b       	or	r24, r25
 382:	b1 f3       	breq	.-20     	; 0x370 <main+0x124>
			{
				//do nothing
			}
			//transmit decimal point
			USARTD0.DATA = '.';
 384:	80 ea       	ldi	r24, 0xA0	; 160
 386:	99 e0       	ldi	r25, 0x09	; 9
 388:	2e e2       	ldi	r18, 0x2E	; 46
 38a:	fc 01       	movw	r30, r24
 38c:	20 83       	st	Z, r18
			while(!(USARTD0.STATUS & USART_DREIF_bm))
 38e:	00 00       	nop
 390:	80 ea       	ldi	r24, 0xA0	; 160
 392:	99 e0       	ldi	r25, 0x09	; 9
 394:	fc 01       	movw	r30, r24
 396:	81 81       	ldd	r24, Z+1	; 0x01
 398:	88 2f       	mov	r24, r24
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	80 72       	andi	r24, 0x20	; 32
 39e:	99 27       	eor	r25, r25
 3a0:	89 2b       	or	r24, r25
 3a2:	b1 f3       	breq	.-20     	; 0x390 <main+0x144>
			{
				//do nothing
			}
			
			//get second decimal digit and transmit
			result2 =(10*(result_flt-int1));
 3a4:	89 81       	ldd	r24, Y+1	; 0x01
 3a6:	88 2f       	mov	r24, r24
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	09 2e       	mov	r0, r25
 3ac:	00 0c       	add	r0, r0
 3ae:	aa 0b       	sbc	r26, r26
 3b0:	bb 0b       	sbc	r27, r27
 3b2:	bc 01       	movw	r22, r24
 3b4:	cd 01       	movw	r24, r26
 3b6:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__floatsisf>
 3ba:	dc 01       	movw	r26, r24
 3bc:	cb 01       	movw	r24, r22
 3be:	9c 01       	movw	r18, r24
 3c0:	ad 01       	movw	r20, r26
 3c2:	6c 85       	ldd	r22, Y+12	; 0x0c
 3c4:	7d 85       	ldd	r23, Y+13	; 0x0d
 3c6:	8e 85       	ldd	r24, Y+14	; 0x0e
 3c8:	9f 85       	ldd	r25, Y+15	; 0x0f
 3ca:	0e 94 42 04 	call	0x884	; 0x884 <__subsf3>
 3ce:	dc 01       	movw	r26, r24
 3d0:	cb 01       	movw	r24, r22
 3d2:	20 e0       	ldi	r18, 0x00	; 0
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	40 e2       	ldi	r20, 0x20	; 32
 3d8:	51 e4       	ldi	r21, 0x41	; 65
 3da:	bc 01       	movw	r22, r24
 3dc:	cd 01       	movw	r24, r26
 3de:	0e 94 6c 05 	call	0xad8	; 0xad8 <__mulsf3>
 3e2:	dc 01       	movw	r26, r24
 3e4:	cb 01       	movw	r24, r22
 3e6:	8c 83       	std	Y+4, r24	; 0x04
 3e8:	9d 83       	std	Y+5, r25	; 0x05
 3ea:	ae 83       	std	Y+6, r26	; 0x06
 3ec:	bf 83       	std	Y+7, r27	; 0x07
			int2 = (uint8_t)(result2);
 3ee:	6c 81       	ldd	r22, Y+4	; 0x04
 3f0:	7d 81       	ldd	r23, Y+5	; 0x05
 3f2:	8e 81       	ldd	r24, Y+6	; 0x06
 3f4:	9f 81       	ldd	r25, Y+7	; 0x07
 3f6:	0e 94 af 04 	call	0x95e	; 0x95e <__fixunssfsi>
 3fa:	dc 01       	movw	r26, r24
 3fc:	cb 01       	movw	r24, r22
 3fe:	8a 83       	std	Y+2, r24	; 0x02
			USARTD0.DATA = (int2+48);
 400:	80 ea       	ldi	r24, 0xA0	; 160
 402:	99 e0       	ldi	r25, 0x09	; 9
 404:	2a 81       	ldd	r18, Y+2	; 0x02
 406:	20 5d       	subi	r18, 0xD0	; 208
 408:	fc 01       	movw	r30, r24
 40a:	20 83       	st	Z, r18
			while(!(USARTD0.STATUS & USART_DREIF_bm))
 40c:	00 00       	nop
 40e:	80 ea       	ldi	r24, 0xA0	; 160
 410:	99 e0       	ldi	r25, 0x09	; 9
 412:	fc 01       	movw	r30, r24
 414:	81 81       	ldd	r24, Z+1	; 0x01
 416:	88 2f       	mov	r24, r24
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	80 72       	andi	r24, 0x20	; 32
 41c:	99 27       	eor	r25, r25
 41e:	89 2b       	or	r24, r25
 420:	b1 f3       	breq	.-20     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
			{
				//do nothing
			}
			
			//get third decimal digit and transmit
			result3 = (10*(result2-int2));
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	88 2f       	mov	r24, r24
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	09 2e       	mov	r0, r25
 42a:	00 0c       	add	r0, r0
 42c:	aa 0b       	sbc	r26, r26
 42e:	bb 0b       	sbc	r27, r27
 430:	bc 01       	movw	r22, r24
 432:	cd 01       	movw	r24, r26
 434:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__floatsisf>
 438:	dc 01       	movw	r26, r24
 43a:	cb 01       	movw	r24, r22
 43c:	9c 01       	movw	r18, r24
 43e:	ad 01       	movw	r20, r26
 440:	6c 81       	ldd	r22, Y+4	; 0x04
 442:	7d 81       	ldd	r23, Y+5	; 0x05
 444:	8e 81       	ldd	r24, Y+6	; 0x06
 446:	9f 81       	ldd	r25, Y+7	; 0x07
 448:	0e 94 42 04 	call	0x884	; 0x884 <__subsf3>
 44c:	dc 01       	movw	r26, r24
 44e:	cb 01       	movw	r24, r22
 450:	20 e0       	ldi	r18, 0x00	; 0
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	40 e2       	ldi	r20, 0x20	; 32
 456:	51 e4       	ldi	r21, 0x41	; 65
 458:	bc 01       	movw	r22, r24
 45a:	cd 01       	movw	r24, r26
 45c:	0e 94 6c 05 	call	0xad8	; 0xad8 <__mulsf3>
 460:	dc 01       	movw	r26, r24
 462:	cb 01       	movw	r24, r22
 464:	88 87       	std	Y+8, r24	; 0x08
 466:	99 87       	std	Y+9, r25	; 0x09
 468:	aa 87       	std	Y+10, r26	; 0x0a
 46a:	bb 87       	std	Y+11, r27	; 0x0b
			int3 =(uint8_t)(result3);
 46c:	68 85       	ldd	r22, Y+8	; 0x08
 46e:	79 85       	ldd	r23, Y+9	; 0x09
 470:	8a 85       	ldd	r24, Y+10	; 0x0a
 472:	9b 85       	ldd	r25, Y+11	; 0x0b
 474:	0e 94 af 04 	call	0x95e	; 0x95e <__fixunssfsi>
 478:	dc 01       	movw	r26, r24
 47a:	cb 01       	movw	r24, r22
 47c:	8b 83       	std	Y+3, r24	; 0x03
			USARTD0.DATA = (int3+48);
 47e:	80 ea       	ldi	r24, 0xA0	; 160
 480:	99 e0       	ldi	r25, 0x09	; 9
 482:	2b 81       	ldd	r18, Y+3	; 0x03
 484:	20 5d       	subi	r18, 0xD0	; 208
 486:	fc 01       	movw	r30, r24
 488:	20 83       	st	Z, r18
			while(!(USARTD0.STATUS & USART_DREIF_bm))
 48a:	00 00       	nop
 48c:	80 ea       	ldi	r24, 0xA0	; 160
 48e:	99 e0       	ldi	r25, 0x09	; 9
 490:	fc 01       	movw	r30, r24
 492:	81 81       	ldd	r24, Z+1	; 0x01
 494:	88 2f       	mov	r24, r24
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	80 72       	andi	r24, 0x20	; 32
 49a:	99 27       	eor	r25, r25
 49c:	89 2b       	or	r24, r25
 49e:	b1 f3       	breq	.-20     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
			{
				//do nothing
			}
			
			//output voltage symbol
			USARTD0.DATA = 'V';
 4a0:	80 ea       	ldi	r24, 0xA0	; 160
 4a2:	99 e0       	ldi	r25, 0x09	; 9
 4a4:	26 e5       	ldi	r18, 0x56	; 86
 4a6:	fc 01       	movw	r30, r24
 4a8:	20 83       	st	Z, r18
			while(!(USARTD0.STATUS & USART_DREIF_bm))
 4aa:	00 00       	nop
 4ac:	80 ea       	ldi	r24, 0xA0	; 160
 4ae:	99 e0       	ldi	r25, 0x09	; 9
 4b0:	fc 01       	movw	r30, r24
 4b2:	81 81       	ldd	r24, Z+1	; 0x01
 4b4:	88 2f       	mov	r24, r24
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	80 72       	andi	r24, 0x20	; 32
 4ba:	99 27       	eor	r25, r25
 4bc:	89 2b       	or	r24, r25
 4be:	b1 f3       	breq	.-20     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
			////////////////////////////////////
			
			////////////////////////////////////////
			/*SPACE*/
			////////////////////////////////////
			USARTD0.DATA = ' ';
 4c0:	80 ea       	ldi	r24, 0xA0	; 160
 4c2:	99 e0       	ldi	r25, 0x09	; 9
 4c4:	20 e2       	ldi	r18, 0x20	; 32
 4c6:	fc 01       	movw	r30, r24
 4c8:	20 83       	st	Z, r18
			while(!(USARTD0.STATUS & USART_DREIF_bm))
 4ca:	00 00       	nop
 4cc:	80 ea       	ldi	r24, 0xA0	; 160
 4ce:	99 e0       	ldi	r25, 0x09	; 9
 4d0:	fc 01       	movw	r30, r24
 4d2:	81 81       	ldd	r24, Z+1	; 0x01
 4d4:	88 2f       	mov	r24, r24
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	80 72       	andi	r24, 0x20	; 32
 4da:	99 27       	eor	r25, r25
 4dc:	89 2b       	or	r24, r25
 4de:	b1 f3       	breq	.-20     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
			////////////////////////////////////
			
			////////////////////////////////////////
			/*OUTPUT VOLTAGE IN HEXADECIMAL VALUE*/
			////////////////////////////////////
			USARTD0.DATA = '(';
 4e0:	80 ea       	ldi	r24, 0xA0	; 160
 4e2:	99 e0       	ldi	r25, 0x09	; 9
 4e4:	28 e2       	ldi	r18, 0x28	; 40
 4e6:	fc 01       	movw	r30, r24
 4e8:	20 83       	st	Z, r18
			while(!(USARTD0.STATUS & USART_DREIF_bm))
 4ea:	00 00       	nop
 4ec:	80 ea       	ldi	r24, 0xA0	; 160
 4ee:	99 e0       	ldi	r25, 0x09	; 9
 4f0:	fc 01       	movw	r30, r24
 4f2:	81 81       	ldd	r24, Z+1	; 0x01
 4f4:	88 2f       	mov	r24, r24
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	80 72       	andi	r24, 0x20	; 32
 4fa:	99 27       	eor	r25, r25
 4fc:	89 2b       	or	r24, r25
 4fe:	b1 f3       	breq	.-20     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
			{
				//do nothing
			}
			USARTD0.DATA = '0';
 500:	80 ea       	ldi	r24, 0xA0	; 160
 502:	99 e0       	ldi	r25, 0x09	; 9
 504:	20 e3       	ldi	r18, 0x30	; 48
 506:	fc 01       	movw	r30, r24
 508:	20 83       	st	Z, r18
			while(!(USARTD0.STATUS & USART_DREIF_bm))
 50a:	00 00       	nop
 50c:	80 ea       	ldi	r24, 0xA0	; 160
 50e:	99 e0       	ldi	r25, 0x09	; 9
 510:	fc 01       	movw	r30, r24
 512:	81 81       	ldd	r24, Z+1	; 0x01
 514:	88 2f       	mov	r24, r24
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	80 72       	andi	r24, 0x20	; 32
 51a:	99 27       	eor	r25, r25
 51c:	89 2b       	or	r24, r25
 51e:	b1 f3       	breq	.-20     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
			{
				//do nothing
			}
			USARTD0.DATA = 'x';
 520:	80 ea       	ldi	r24, 0xA0	; 160
 522:	99 e0       	ldi	r25, 0x09	; 9
 524:	28 e7       	ldi	r18, 0x78	; 120
 526:	fc 01       	movw	r30, r24
 528:	20 83       	st	Z, r18
			while(!(USARTD0.STATUS & USART_DREIF_bm))
 52a:	00 00       	nop
 52c:	80 ea       	ldi	r24, 0xA0	; 160
 52e:	99 e0       	ldi	r25, 0x09	; 9
 530:	fc 01       	movw	r30, r24
 532:	81 81       	ldd	r24, Z+1	; 0x01
 534:	88 2f       	mov	r24, r24
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	80 72       	andi	r24, 0x20	; 32
 53a:	99 27       	eor	r25, r25
 53c:	89 2b       	or	r24, r25
 53e:	b1 f3       	breq	.-20     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
			{
				//do nothing
			}
			//CONVERT TO HEX
			//get byte 0
			int1 = (result & byte0_bm);
 540:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <result>
 544:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <result+0x1>
 548:	8f 70       	andi	r24, 0x0F	; 15
 54a:	89 83       	std	Y+1, r24	; 0x01
			if(int1 > 9)
 54c:	89 81       	ldd	r24, Y+1	; 0x01
 54e:	8a 30       	cpi	r24, 0x0A	; 10
 550:	20 f0       	brcs	.+8      	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
			{
				int1 = int1+55;
 552:	89 81       	ldd	r24, Y+1	; 0x01
 554:	89 5c       	subi	r24, 0xC9	; 201
 556:	89 83       	std	Y+1, r24	; 0x01
 558:	03 c0       	rjmp	.+6      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
			}
			else
			{
				int1 = int1+48;
 55a:	89 81       	ldd	r24, Y+1	; 0x01
 55c:	80 5d       	subi	r24, 0xD0	; 208
 55e:	89 83       	std	Y+1, r24	; 0x01
			}
			//get byte 1
			int2 = (result & byte1_bm);
 560:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <result>
 564:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <result+0x1>
 568:	80 7f       	andi	r24, 0xF0	; 240
 56a:	8a 83       	std	Y+2, r24	; 0x02
			int2 = (int2>>4);
 56c:	8a 81       	ldd	r24, Y+2	; 0x02
 56e:	82 95       	swap	r24
 570:	8f 70       	andi	r24, 0x0F	; 15
 572:	8a 83       	std	Y+2, r24	; 0x02
			if(int2 > 9)
 574:	8a 81       	ldd	r24, Y+2	; 0x02
 576:	8a 30       	cpi	r24, 0x0A	; 10
 578:	20 f0       	brcs	.+8      	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
			{
				int2 = int2+55;
 57a:	8a 81       	ldd	r24, Y+2	; 0x02
 57c:	89 5c       	subi	r24, 0xC9	; 201
 57e:	8a 83       	std	Y+2, r24	; 0x02
 580:	03 c0       	rjmp	.+6      	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
			}
			else
			{
				int2 = int2+48;
 582:	8a 81       	ldd	r24, Y+2	; 0x02
 584:	80 5d       	subi	r24, 0xD0	; 208
 586:	8a 83       	std	Y+2, r24	; 0x02
			}
			//get byte 3
			int3 = (result >> 8);
 588:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <result>
 58c:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <result+0x1>
 590:	89 2f       	mov	r24, r25
 592:	99 0f       	add	r25, r25
 594:	99 0b       	sbc	r25, r25
 596:	8b 83       	std	Y+3, r24	; 0x03
			if(int3 > 9)
 598:	8b 81       	ldd	r24, Y+3	; 0x03
 59a:	8a 30       	cpi	r24, 0x0A	; 10
 59c:	20 f0       	brcs	.+8      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
			{
				int3 = int3+55;
 59e:	8b 81       	ldd	r24, Y+3	; 0x03
 5a0:	89 5c       	subi	r24, 0xC9	; 201
 5a2:	8b 83       	std	Y+3, r24	; 0x03
 5a4:	03 c0       	rjmp	.+6      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
			}
			else
			{
				int3 = int3+48;
 5a6:	8b 81       	ldd	r24, Y+3	; 0x03
 5a8:	80 5d       	subi	r24, 0xD0	; 208
 5aa:	8b 83       	std	Y+3, r24	; 0x03
			}
			USARTD0.DATA = int3;
 5ac:	80 ea       	ldi	r24, 0xA0	; 160
 5ae:	99 e0       	ldi	r25, 0x09	; 9
 5b0:	2b 81       	ldd	r18, Y+3	; 0x03
 5b2:	fc 01       	movw	r30, r24
 5b4:	20 83       	st	Z, r18
			while(!(USARTD0.STATUS & USART_DREIF_bm))
 5b6:	00 00       	nop
 5b8:	80 ea       	ldi	r24, 0xA0	; 160
 5ba:	99 e0       	ldi	r25, 0x09	; 9
 5bc:	fc 01       	movw	r30, r24
 5be:	81 81       	ldd	r24, Z+1	; 0x01
 5c0:	88 2f       	mov	r24, r24
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	80 72       	andi	r24, 0x20	; 32
 5c6:	99 27       	eor	r25, r25
 5c8:	89 2b       	or	r24, r25
 5ca:	b1 f3       	breq	.-20     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
			{
				//do nothing
			}
			USARTD0.DATA = int2;
 5cc:	80 ea       	ldi	r24, 0xA0	; 160
 5ce:	99 e0       	ldi	r25, 0x09	; 9
 5d0:	2a 81       	ldd	r18, Y+2	; 0x02
 5d2:	fc 01       	movw	r30, r24
 5d4:	20 83       	st	Z, r18
			while(!(USARTD0.STATUS & USART_DREIF_bm))
 5d6:	00 00       	nop
 5d8:	80 ea       	ldi	r24, 0xA0	; 160
 5da:	99 e0       	ldi	r25, 0x09	; 9
 5dc:	fc 01       	movw	r30, r24
 5de:	81 81       	ldd	r24, Z+1	; 0x01
 5e0:	88 2f       	mov	r24, r24
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	80 72       	andi	r24, 0x20	; 32
 5e6:	99 27       	eor	r25, r25
 5e8:	89 2b       	or	r24, r25
 5ea:	b1 f3       	breq	.-20     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
			{
				//do nothing
			}
			USARTD0.DATA = int1;
 5ec:	80 ea       	ldi	r24, 0xA0	; 160
 5ee:	99 e0       	ldi	r25, 0x09	; 9
 5f0:	29 81       	ldd	r18, Y+1	; 0x01
 5f2:	fc 01       	movw	r30, r24
 5f4:	20 83       	st	Z, r18
			while(!(USARTD0.STATUS & USART_DREIF_bm))
 5f6:	00 00       	nop
 5f8:	80 ea       	ldi	r24, 0xA0	; 160
 5fa:	99 e0       	ldi	r25, 0x09	; 9
 5fc:	fc 01       	movw	r30, r24
 5fe:	81 81       	ldd	r24, Z+1	; 0x01
 600:	88 2f       	mov	r24, r24
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	80 72       	andi	r24, 0x20	; 32
 606:	99 27       	eor	r25, r25
 608:	89 2b       	or	r24, r25
 60a:	b1 f3       	breq	.-20     	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
			{
				//do nothing
			}
			USARTD0.DATA = ')';
 60c:	80 ea       	ldi	r24, 0xA0	; 160
 60e:	99 e0       	ldi	r25, 0x09	; 9
 610:	29 e2       	ldi	r18, 0x29	; 41
 612:	fc 01       	movw	r30, r24
 614:	20 83       	st	Z, r18
			while(!(USARTD0.STATUS & USART_DREIF_bm))
 616:	00 00       	nop
 618:	80 ea       	ldi	r24, 0xA0	; 160
 61a:	99 e0       	ldi	r25, 0x09	; 9
 61c:	fc 01       	movw	r30, r24
 61e:	81 81       	ldd	r24, Z+1	; 0x01
 620:	88 2f       	mov	r24, r24
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	80 72       	andi	r24, 0x20	; 32
 626:	99 27       	eor	r25, r25
 628:	89 2b       	or	r24, r25
 62a:	b1 f3       	breq	.-20     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
			////////////////////////////////////
			
			////////////////////////////////////////
			/*CARRIAGE RETURN*/
			////////////////////////////////////
			USARTD0.DATA = '\r';
 62c:	80 ea       	ldi	r24, 0xA0	; 160
 62e:	99 e0       	ldi	r25, 0x09	; 9
 630:	2d e0       	ldi	r18, 0x0D	; 13
 632:	fc 01       	movw	r30, r24
 634:	20 83       	st	Z, r18
			while(!(USARTD0.STATUS & USART_DREIF_bm))
 636:	00 00       	nop
 638:	80 ea       	ldi	r24, 0xA0	; 160
 63a:	99 e0       	ldi	r25, 0x09	; 9
 63c:	fc 01       	movw	r30, r24
 63e:	81 81       	ldd	r24, Z+1	; 0x01
 640:	88 2f       	mov	r24, r24
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	80 72       	andi	r24, 0x20	; 32
 646:	99 27       	eor	r25, r25
 648:	89 2b       	or	r24, r25
 64a:	b1 f3       	breq	.-20     	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
			////////////////////////////////////
			
			////////////////////////////////////////
			/*LINEFEED*/
			////////////////////////////////////
			USARTD0.DATA = 10;
 64c:	80 ea       	ldi	r24, 0xA0	; 160
 64e:	99 e0       	ldi	r25, 0x09	; 9
 650:	2a e0       	ldi	r18, 0x0A	; 10
 652:	fc 01       	movw	r30, r24
 654:	20 83       	st	Z, r18
			while(!(USARTD0.STATUS & USART_DREIF_bm))
 656:	00 00       	nop
 658:	80 ea       	ldi	r24, 0xA0	; 160
 65a:	99 e0       	ldi	r25, 0x09	; 9
 65c:	fc 01       	movw	r30, r24
 65e:	81 81       	ldd	r24, Z+1	; 0x01
 660:	88 2f       	mov	r24, r24
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	80 72       	andi	r24, 0x20	; 32
 666:	99 27       	eor	r25, r25
 668:	89 2b       	or	r24, r25
 66a:	b1 f3       	breq	.-20     	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
			////////////////////////////////////////
			/*END LINEFEED*/
			////////////////////////////////////
			
			//reset adca
			adca_ready = 0;
 66c:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <__data_end>
		}
	}
 670:	0c ce       	rjmp	.-1000   	; 0x28a <main+0x3e>

00000672 <adc_init>:
}

void adc_init(void)
{
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
 676:	cd b7       	in	r28, 0x3d	; 61
 678:	de b7       	in	r29, 0x3e	; 62
	//set port a pin 1 and 6 as inputs
	PORTA.DIRCLR = (PIN1_bm|PIN6_bm);
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	96 e0       	ldi	r25, 0x06	; 6
 67e:	22 e4       	ldi	r18, 0x42	; 66
 680:	fc 01       	movw	r30, r24
 682:	22 83       	std	Z+2, r18	; 0x02
	//set adca as 12 bit signed right adjusted
	ADCA.CTRLB = (ADC_CONMODE_bm|ADC_RESOLUTION_12BIT_gc);
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	92 e0       	ldi	r25, 0x02	; 2
 688:	20 e1       	ldi	r18, 0x10	; 16
 68a:	fc 01       	movw	r30, r24
 68c:	21 83       	std	Z+1, r18	; 0x01
	//set adca reference voltage to +2.5V
	ADCA.REFCTRL = (0|ADC_REFSEL_AREFB_gc);
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	92 e0       	ldi	r25, 0x02	; 2
 692:	20 e3       	ldi	r18, 0x30	; 48
 694:	fc 01       	movw	r30, r24
 696:	22 83       	std	Z+2, r18	; 0x02
	//set adca channel 0 to differential with gain x1
	ADCA.CH0.CTRL = (ADC_CH_INPUTMODE_DIFFWGAIN_gc|ADC_CH_GAIN1_bm);
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	92 e0       	ldi	r25, 0x02	; 2
 69c:	2b e0       	ldi	r18, 0x0B	; 11
 69e:	fc 01       	movw	r30, r24
 6a0:	20 a3       	std	Z+32, r18	; 0x20
	//lower ADCA sampling
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	92 e0       	ldi	r25, 0x02	; 2
 6a6:	27 e0       	ldi	r18, 0x07	; 7
 6a8:	fc 01       	movw	r30, r24
 6aa:	24 83       	std	Z+4, r18	; 0x04
	//set adca muxpos to port A pin 1 and pin 6
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN1_gc|ADC_CH_MUXNEG_PIN6_gc);
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	92 e0       	ldi	r25, 0x02	; 2
 6b0:	2a e0       	ldi	r18, 0x0A	; 10
 6b2:	fc 01       	movw	r30, r24
 6b4:	21 a3       	std	Z+33, r18	; 0x21
	//enable interrupts on ADCA ch0
	ADCA.CH0.INTCTRL = (ADC_CH_INTMODE_COMPLETE_gc|ADC_CH_INTLVL_MED_gc);
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	92 e0       	ldi	r25, 0x02	; 2
 6ba:	22 e0       	ldi	r18, 0x02	; 2
 6bc:	fc 01       	movw	r30, r24
 6be:	22 a3       	std	Z+34, r18	; 0x22
	//enable conversion trigger on channel event 0
	ADCA.EVCTRL= (ADC_EVSEL_0123_gc|ADC_EVACT_CH0_gc);
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	92 e0       	ldi	r25, 0x02	; 2
 6c4:	21 e0       	ldi	r18, 0x01	; 1
 6c6:	fc 01       	movw	r30, r24
 6c8:	23 83       	std	Z+3, r18	; 0x03
	//load calibration register with factory values
	ADCA.CALL = ADCA_CALL;
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	92 e0       	ldi	r25, 0x02	; 2
 6ce:	2c e0       	ldi	r18, 0x0C	; 12
 6d0:	32 e0       	ldi	r19, 0x02	; 2
 6d2:	f9 01       	movw	r30, r18
 6d4:	20 81       	ld	r18, Z
 6d6:	fc 01       	movw	r30, r24
 6d8:	24 87       	std	Z+12, r18	; 0x0c
	ADCA.CALH = ADCA_CALH;
 6da:	80 e0       	ldi	r24, 0x00	; 0
 6dc:	92 e0       	ldi	r25, 0x02	; 2
 6de:	2d e0       	ldi	r18, 0x0D	; 13
 6e0:	32 e0       	ldi	r19, 0x02	; 2
 6e2:	f9 01       	movw	r30, r18
 6e4:	20 81       	ld	r18, Z
 6e6:	fc 01       	movw	r30, r24
 6e8:	25 87       	std	Z+13, r18	; 0x0d
	//ENABLE ADC
	ADCA.CTRLA = (ADC_ENABLE_bm);
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	92 e0       	ldi	r25, 0x02	; 2
 6ee:	21 e0       	ldi	r18, 0x01	; 1
 6f0:	fc 01       	movw	r30, r24
 6f2:	20 83       	st	Z, r18
}
 6f4:	00 00       	nop
 6f6:	df 91       	pop	r29
 6f8:	cf 91       	pop	r28
 6fa:	08 95       	ret

000006fc <inter_init>:

void inter_init(void)
{
 6fc:	cf 93       	push	r28
 6fe:	df 93       	push	r29
 700:	cd b7       	in	r28, 0x3d	; 61
 702:	de b7       	in	r29, 0x3e	; 62
	//enable medium level interrupts in pmic
	PMIC.CTRL = PMIC_MEDLVLEN_bm;
 704:	80 ea       	ldi	r24, 0xA0	; 160
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	22 e0       	ldi	r18, 0x02	; 2
 70a:	fc 01       	movw	r30, r24
 70c:	22 83       	std	Z+2, r18	; 0x02
	//enable global interrupts
	sei();
 70e:	78 94       	sei
}
 710:	00 00       	nop
 712:	df 91       	pop	r29
 714:	cf 91       	pop	r28
 716:	08 95       	ret

00000718 <tcc0_init>:
void tcc0_init(void)
{
 718:	cf 93       	push	r28
 71a:	df 93       	push	r29
 71c:	00 d0       	rcall	.+0      	; 0x71e <tcc0_init+0x6>
 71e:	cd b7       	in	r28, 0x3d	; 61
 720:	de b7       	in	r29, 0x3e	; 62
	uint16_t period = 977;
 722:	81 ed       	ldi	r24, 0xD1	; 209
 724:	93 e0       	ldi	r25, 0x03	; 3
 726:	89 83       	std	Y+1, r24	; 0x01
 728:	9a 83       	std	Y+2, r25	; 0x02
	uint8_t offset = 15;
 72a:	8f e0       	ldi	r24, 0x0F	; 15
 72c:	8b 83       	std	Y+3, r24	; 0x03
	//load tcc0 period register
	TCC0.PER = period + offset;
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	98 e0       	ldi	r25, 0x08	; 8
 732:	2b 81       	ldd	r18, Y+3	; 0x03
 734:	42 2f       	mov	r20, r18
 736:	50 e0       	ldi	r21, 0x00	; 0
 738:	29 81       	ldd	r18, Y+1	; 0x01
 73a:	3a 81       	ldd	r19, Y+2	; 0x02
 73c:	24 0f       	add	r18, r20
 73e:	35 1f       	adc	r19, r21
 740:	fc 01       	movw	r30, r24
 742:	26 a3       	std	Z+38, r18	; 0x26
 744:	37 a3       	std	Z+39, r19	; 0x27
	TCC0.CNT = 0;
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	98 e0       	ldi	r25, 0x08	; 8
 74a:	fc 01       	movw	r30, r24
 74c:	10 a2       	std	Z+32, r1	; 0x20
 74e:	11 a2       	std	Z+33, r1	; 0x21
	//set tcc0 as event channel 0 source
	EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
 750:	80 e8       	ldi	r24, 0x80	; 128
 752:	91 e0       	ldi	r25, 0x01	; 1
 754:	20 ec       	ldi	r18, 0xC0	; 192
 756:	fc 01       	movw	r30, r24
 758:	20 83       	st	Z, r18
}
 75a:	00 00       	nop
 75c:	23 96       	adiw	r28, 0x03	; 3
 75e:	cd bf       	out	0x3d, r28	; 61
 760:	de bf       	out	0x3e, r29	; 62
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	08 95       	ret

00000768 <usartd0_init>:

void usartd0_init(void)
{
 768:	cf 93       	push	r28
 76a:	df 93       	push	r29
 76c:	cd b7       	in	r28, 0x3d	; 61
 76e:	de b7       	in	r29, 0x3e	; 62
  //initialize transmitter and reciever pins
	PORTD.OUTSET = PIN3_bm;
 770:	80 e6       	ldi	r24, 0x60	; 96
 772:	96 e0       	ldi	r25, 0x06	; 6
 774:	28 e0       	ldi	r18, 0x08	; 8
 776:	fc 01       	movw	r30, r24
 778:	25 83       	std	Z+5, r18	; 0x05
	PORTD.DIRSET = PIN3_bm;
 77a:	80 e6       	ldi	r24, 0x60	; 96
 77c:	96 e0       	ldi	r25, 0x06	; 6
 77e:	28 e0       	ldi	r18, 0x08	; 8
 780:	fc 01       	movw	r30, r24
 782:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 784:	80 e6       	ldi	r24, 0x60	; 96
 786:	96 e0       	ldi	r25, 0x06	; 6
 788:	24 e0       	ldi	r18, 0x04	; 4
 78a:	fc 01       	movw	r30, r24
 78c:	22 83       	std	Z+2, r18	; 0x02

  //set baud rate
	USARTD0.BAUDCTRLA = (uint8_t)bsel;
 78e:	80 ea       	ldi	r24, 0xA0	; 160
 790:	99 e0       	ldi	r25, 0x09	; 9
 792:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 796:	fc 01       	movw	r30, r24
 798:	26 83       	std	Z+6, r18	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)((bscale << 4)|(bsel >> 8));
 79a:	80 ea       	ldi	r24, 0xA0	; 160
 79c:	99 e0       	ldi	r25, 0x09	; 9
 79e:	20 91 01 20 	lds	r18, 0x2001	; 0x802001 <bscale>
 7a2:	02 2e       	mov	r0, r18
 7a4:	00 0c       	add	r0, r0
 7a6:	33 0b       	sbc	r19, r19
 7a8:	22 95       	swap	r18
 7aa:	32 95       	swap	r19
 7ac:	30 7f       	andi	r19, 0xF0	; 240
 7ae:	32 27       	eor	r19, r18
 7b0:	20 7f       	andi	r18, 0xF0	; 240
 7b2:	32 27       	eor	r19, r18
 7b4:	42 2f       	mov	r20, r18
 7b6:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 7ba:	02 2e       	mov	r0, r18
 7bc:	00 0c       	add	r0, r0
 7be:	33 0b       	sbc	r19, r19
 7c0:	23 2f       	mov	r18, r19
 7c2:	33 0f       	add	r19, r19
 7c4:	33 0b       	sbc	r19, r19
 7c6:	24 2b       	or	r18, r20
 7c8:	fc 01       	movw	r30, r24
 7ca:	27 83       	std	Z+7, r18	; 0x07

  //set to 8 bit odd parity with 1 stop bit
	USARTD0.CTRLC =	(USART_CMODE_ASYNCHRONOUS_gc |USART_PMODE_ODD_gc| USART_CHSIZE_8BIT_gc)&(~USART_SBMODE_bm);
 7cc:	80 ea       	ldi	r24, 0xA0	; 160
 7ce:	99 e0       	ldi	r25, 0x09	; 9
 7d0:	23 e3       	ldi	r18, 0x33	; 51
 7d2:	fc 01       	movw	r30, r24
 7d4:	25 83       	std	Z+5, r18	; 0x05

  //ENABLE TRANSMITTER AND RECIEVER
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 7d6:	80 ea       	ldi	r24, 0xA0	; 160
 7d8:	99 e0       	ldi	r25, 0x09	; 9
 7da:	28 e1       	ldi	r18, 0x18	; 24
 7dc:	fc 01       	movw	r30, r24
 7de:	24 83       	std	Z+4, r18	; 0x04
}
 7e0:	00 00       	nop
 7e2:	df 91       	pop	r29
 7e4:	cf 91       	pop	r28
 7e6:	08 95       	ret

000007e8 <__vector_71>:

ISR(ADCA_CH0_vect)
{
 7e8:	1f 92       	push	r1
 7ea:	0f 92       	push	r0
 7ec:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 7f0:	0f 92       	push	r0
 7f2:	11 24       	eor	r1, r1
 7f4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 7f8:	0f 92       	push	r0
 7fa:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 7fe:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 802:	0f 92       	push	r0
 804:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 808:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 80c:	0f 92       	push	r0
 80e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 812:	2f 93       	push	r18
 814:	3f 93       	push	r19
 816:	8f 93       	push	r24
 818:	9f 93       	push	r25
 81a:	ef 93       	push	r30
 81c:	ff 93       	push	r31
 81e:	cf 93       	push	r28
 820:	df 93       	push	r29
 822:	cd b7       	in	r28, 0x3d	; 61
 824:	de b7       	in	r29, 0x3e	; 62
	result = (ADCA.CH0.RESH<<8 | ADCA.CH0.RESL<<0);
 826:	80 e0       	ldi	r24, 0x00	; 0
 828:	92 e0       	ldi	r25, 0x02	; 2
 82a:	fc 01       	movw	r30, r24
 82c:	85 a1       	ldd	r24, Z+37	; 0x25
 82e:	88 2f       	mov	r24, r24
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	38 2f       	mov	r19, r24
 834:	22 27       	eor	r18, r18
 836:	80 e0       	ldi	r24, 0x00	; 0
 838:	92 e0       	ldi	r25, 0x02	; 2
 83a:	fc 01       	movw	r30, r24
 83c:	84 a1       	ldd	r24, Z+36	; 0x24
 83e:	88 2f       	mov	r24, r24
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	82 2b       	or	r24, r18
 844:	93 2b       	or	r25, r19
 846:	80 93 03 20 	sts	0x2003, r24	; 0x802003 <result>
 84a:	90 93 04 20 	sts	0x2004, r25	; 0x802004 <result+0x1>
	//set ADCA_READY flag
	adca_ready = 1;
 84e:	81 e0       	ldi	r24, 0x01	; 1
 850:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <__data_end>
	
 854:	00 00       	nop
 856:	df 91       	pop	r29
 858:	cf 91       	pop	r28
 85a:	ff 91       	pop	r31
 85c:	ef 91       	pop	r30
 85e:	9f 91       	pop	r25
 860:	8f 91       	pop	r24
 862:	3f 91       	pop	r19
 864:	2f 91       	pop	r18
 866:	0f 90       	pop	r0
 868:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 86c:	0f 90       	pop	r0
 86e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 872:	0f 90       	pop	r0
 874:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 878:	0f 90       	pop	r0
 87a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 87e:	0f 90       	pop	r0
 880:	1f 90       	pop	r1
 882:	18 95       	reti

00000884 <__subsf3>:
 884:	50 58       	subi	r21, 0x80	; 128

00000886 <__addsf3>:
 886:	bb 27       	eor	r27, r27
 888:	aa 27       	eor	r26, r26
 88a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__addsf3x>
 88e:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__fp_round>
 892:	0e 94 24 05 	call	0xa48	; 0xa48 <__fp_pscA>
 896:	38 f0       	brcs	.+14     	; 0x8a6 <__addsf3+0x20>
 898:	0e 94 2b 05 	call	0xa56	; 0xa56 <__fp_pscB>
 89c:	20 f0       	brcs	.+8      	; 0x8a6 <__addsf3+0x20>
 89e:	39 f4       	brne	.+14     	; 0x8ae <__addsf3+0x28>
 8a0:	9f 3f       	cpi	r25, 0xFF	; 255
 8a2:	19 f4       	brne	.+6      	; 0x8aa <__addsf3+0x24>
 8a4:	26 f4       	brtc	.+8      	; 0x8ae <__addsf3+0x28>
 8a6:	0c 94 21 05 	jmp	0xa42	; 0xa42 <__fp_nan>
 8aa:	0e f4       	brtc	.+2      	; 0x8ae <__addsf3+0x28>
 8ac:	e0 95       	com	r30
 8ae:	e7 fb       	bst	r30, 7
 8b0:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <__fp_inf>

000008b4 <__addsf3x>:
 8b4:	e9 2f       	mov	r30, r25
 8b6:	0e 94 43 05 	call	0xa86	; 0xa86 <__fp_split3>
 8ba:	58 f3       	brcs	.-42     	; 0x892 <__addsf3+0xc>
 8bc:	ba 17       	cp	r27, r26
 8be:	62 07       	cpc	r22, r18
 8c0:	73 07       	cpc	r23, r19
 8c2:	84 07       	cpc	r24, r20
 8c4:	95 07       	cpc	r25, r21
 8c6:	20 f0       	brcs	.+8      	; 0x8d0 <__addsf3x+0x1c>
 8c8:	79 f4       	brne	.+30     	; 0x8e8 <__addsf3x+0x34>
 8ca:	a6 f5       	brtc	.+104    	; 0x934 <__addsf3x+0x80>
 8cc:	0c 94 65 05 	jmp	0xaca	; 0xaca <__fp_zero>
 8d0:	0e f4       	brtc	.+2      	; 0x8d4 <__addsf3x+0x20>
 8d2:	e0 95       	com	r30
 8d4:	0b 2e       	mov	r0, r27
 8d6:	ba 2f       	mov	r27, r26
 8d8:	a0 2d       	mov	r26, r0
 8da:	0b 01       	movw	r0, r22
 8dc:	b9 01       	movw	r22, r18
 8de:	90 01       	movw	r18, r0
 8e0:	0c 01       	movw	r0, r24
 8e2:	ca 01       	movw	r24, r20
 8e4:	a0 01       	movw	r20, r0
 8e6:	11 24       	eor	r1, r1
 8e8:	ff 27       	eor	r31, r31
 8ea:	59 1b       	sub	r21, r25
 8ec:	99 f0       	breq	.+38     	; 0x914 <__addsf3x+0x60>
 8ee:	59 3f       	cpi	r21, 0xF9	; 249
 8f0:	50 f4       	brcc	.+20     	; 0x906 <__addsf3x+0x52>
 8f2:	50 3e       	cpi	r21, 0xE0	; 224
 8f4:	68 f1       	brcs	.+90     	; 0x950 <__addsf3x+0x9c>
 8f6:	1a 16       	cp	r1, r26
 8f8:	f0 40       	sbci	r31, 0x00	; 0
 8fa:	a2 2f       	mov	r26, r18
 8fc:	23 2f       	mov	r18, r19
 8fe:	34 2f       	mov	r19, r20
 900:	44 27       	eor	r20, r20
 902:	58 5f       	subi	r21, 0xF8	; 248
 904:	f3 cf       	rjmp	.-26     	; 0x8ec <__addsf3x+0x38>
 906:	46 95       	lsr	r20
 908:	37 95       	ror	r19
 90a:	27 95       	ror	r18
 90c:	a7 95       	ror	r26
 90e:	f0 40       	sbci	r31, 0x00	; 0
 910:	53 95       	inc	r21
 912:	c9 f7       	brne	.-14     	; 0x906 <__addsf3x+0x52>
 914:	7e f4       	brtc	.+30     	; 0x934 <__addsf3x+0x80>
 916:	1f 16       	cp	r1, r31
 918:	ba 0b       	sbc	r27, r26
 91a:	62 0b       	sbc	r22, r18
 91c:	73 0b       	sbc	r23, r19
 91e:	84 0b       	sbc	r24, r20
 920:	ba f0       	brmi	.+46     	; 0x950 <__addsf3x+0x9c>
 922:	91 50       	subi	r25, 0x01	; 1
 924:	a1 f0       	breq	.+40     	; 0x94e <__addsf3x+0x9a>
 926:	ff 0f       	add	r31, r31
 928:	bb 1f       	adc	r27, r27
 92a:	66 1f       	adc	r22, r22
 92c:	77 1f       	adc	r23, r23
 92e:	88 1f       	adc	r24, r24
 930:	c2 f7       	brpl	.-16     	; 0x922 <__addsf3x+0x6e>
 932:	0e c0       	rjmp	.+28     	; 0x950 <__addsf3x+0x9c>
 934:	ba 0f       	add	r27, r26
 936:	62 1f       	adc	r22, r18
 938:	73 1f       	adc	r23, r19
 93a:	84 1f       	adc	r24, r20
 93c:	48 f4       	brcc	.+18     	; 0x950 <__addsf3x+0x9c>
 93e:	87 95       	ror	r24
 940:	77 95       	ror	r23
 942:	67 95       	ror	r22
 944:	b7 95       	ror	r27
 946:	f7 95       	ror	r31
 948:	9e 3f       	cpi	r25, 0xFE	; 254
 94a:	08 f0       	brcs	.+2      	; 0x94e <__addsf3x+0x9a>
 94c:	b0 cf       	rjmp	.-160    	; 0x8ae <__addsf3+0x28>
 94e:	93 95       	inc	r25
 950:	88 0f       	add	r24, r24
 952:	08 f0       	brcs	.+2      	; 0x956 <__addsf3x+0xa2>
 954:	99 27       	eor	r25, r25
 956:	ee 0f       	add	r30, r30
 958:	97 95       	ror	r25
 95a:	87 95       	ror	r24
 95c:	08 95       	ret

0000095e <__fixunssfsi>:
 95e:	0e 94 4b 05 	call	0xa96	; 0xa96 <__fp_splitA>
 962:	88 f0       	brcs	.+34     	; 0x986 <__fixunssfsi+0x28>
 964:	9f 57       	subi	r25, 0x7F	; 127
 966:	98 f0       	brcs	.+38     	; 0x98e <__fixunssfsi+0x30>
 968:	b9 2f       	mov	r27, r25
 96a:	99 27       	eor	r25, r25
 96c:	b7 51       	subi	r27, 0x17	; 23
 96e:	b0 f0       	brcs	.+44     	; 0x99c <__fixunssfsi+0x3e>
 970:	e1 f0       	breq	.+56     	; 0x9aa <__fixunssfsi+0x4c>
 972:	66 0f       	add	r22, r22
 974:	77 1f       	adc	r23, r23
 976:	88 1f       	adc	r24, r24
 978:	99 1f       	adc	r25, r25
 97a:	1a f0       	brmi	.+6      	; 0x982 <__fixunssfsi+0x24>
 97c:	ba 95       	dec	r27
 97e:	c9 f7       	brne	.-14     	; 0x972 <__fixunssfsi+0x14>
 980:	14 c0       	rjmp	.+40     	; 0x9aa <__fixunssfsi+0x4c>
 982:	b1 30       	cpi	r27, 0x01	; 1
 984:	91 f0       	breq	.+36     	; 0x9aa <__fixunssfsi+0x4c>
 986:	0e 94 65 05 	call	0xaca	; 0xaca <__fp_zero>
 98a:	b1 e0       	ldi	r27, 0x01	; 1
 98c:	08 95       	ret
 98e:	0c 94 65 05 	jmp	0xaca	; 0xaca <__fp_zero>
 992:	67 2f       	mov	r22, r23
 994:	78 2f       	mov	r23, r24
 996:	88 27       	eor	r24, r24
 998:	b8 5f       	subi	r27, 0xF8	; 248
 99a:	39 f0       	breq	.+14     	; 0x9aa <__fixunssfsi+0x4c>
 99c:	b9 3f       	cpi	r27, 0xF9	; 249
 99e:	cc f3       	brlt	.-14     	; 0x992 <__fixunssfsi+0x34>
 9a0:	86 95       	lsr	r24
 9a2:	77 95       	ror	r23
 9a4:	67 95       	ror	r22
 9a6:	b3 95       	inc	r27
 9a8:	d9 f7       	brne	.-10     	; 0x9a0 <__fixunssfsi+0x42>
 9aa:	3e f4       	brtc	.+14     	; 0x9ba <__fixunssfsi+0x5c>
 9ac:	90 95       	com	r25
 9ae:	80 95       	com	r24
 9b0:	70 95       	com	r23
 9b2:	61 95       	neg	r22
 9b4:	7f 4f       	sbci	r23, 0xFF	; 255
 9b6:	8f 4f       	sbci	r24, 0xFF	; 255
 9b8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ba:	08 95       	ret

000009bc <__floatunsisf>:
 9bc:	e8 94       	clt
 9be:	09 c0       	rjmp	.+18     	; 0x9d2 <__floatsisf+0x12>

000009c0 <__floatsisf>:
 9c0:	97 fb       	bst	r25, 7
 9c2:	3e f4       	brtc	.+14     	; 0x9d2 <__floatsisf+0x12>
 9c4:	90 95       	com	r25
 9c6:	80 95       	com	r24
 9c8:	70 95       	com	r23
 9ca:	61 95       	neg	r22
 9cc:	7f 4f       	sbci	r23, 0xFF	; 255
 9ce:	8f 4f       	sbci	r24, 0xFF	; 255
 9d0:	9f 4f       	sbci	r25, 0xFF	; 255
 9d2:	99 23       	and	r25, r25
 9d4:	a9 f0       	breq	.+42     	; 0xa00 <__floatsisf+0x40>
 9d6:	f9 2f       	mov	r31, r25
 9d8:	96 e9       	ldi	r25, 0x96	; 150
 9da:	bb 27       	eor	r27, r27
 9dc:	93 95       	inc	r25
 9de:	f6 95       	lsr	r31
 9e0:	87 95       	ror	r24
 9e2:	77 95       	ror	r23
 9e4:	67 95       	ror	r22
 9e6:	b7 95       	ror	r27
 9e8:	f1 11       	cpse	r31, r1
 9ea:	f8 cf       	rjmp	.-16     	; 0x9dc <__floatsisf+0x1c>
 9ec:	fa f4       	brpl	.+62     	; 0xa2c <__floatsisf+0x6c>
 9ee:	bb 0f       	add	r27, r27
 9f0:	11 f4       	brne	.+4      	; 0x9f6 <__floatsisf+0x36>
 9f2:	60 ff       	sbrs	r22, 0
 9f4:	1b c0       	rjmp	.+54     	; 0xa2c <__floatsisf+0x6c>
 9f6:	6f 5f       	subi	r22, 0xFF	; 255
 9f8:	7f 4f       	sbci	r23, 0xFF	; 255
 9fa:	8f 4f       	sbci	r24, 0xFF	; 255
 9fc:	9f 4f       	sbci	r25, 0xFF	; 255
 9fe:	16 c0       	rjmp	.+44     	; 0xa2c <__floatsisf+0x6c>
 a00:	88 23       	and	r24, r24
 a02:	11 f0       	breq	.+4      	; 0xa08 <__floatsisf+0x48>
 a04:	96 e9       	ldi	r25, 0x96	; 150
 a06:	11 c0       	rjmp	.+34     	; 0xa2a <__floatsisf+0x6a>
 a08:	77 23       	and	r23, r23
 a0a:	21 f0       	breq	.+8      	; 0xa14 <__floatsisf+0x54>
 a0c:	9e e8       	ldi	r25, 0x8E	; 142
 a0e:	87 2f       	mov	r24, r23
 a10:	76 2f       	mov	r23, r22
 a12:	05 c0       	rjmp	.+10     	; 0xa1e <__floatsisf+0x5e>
 a14:	66 23       	and	r22, r22
 a16:	71 f0       	breq	.+28     	; 0xa34 <__floatsisf+0x74>
 a18:	96 e8       	ldi	r25, 0x86	; 134
 a1a:	86 2f       	mov	r24, r22
 a1c:	70 e0       	ldi	r23, 0x00	; 0
 a1e:	60 e0       	ldi	r22, 0x00	; 0
 a20:	2a f0       	brmi	.+10     	; 0xa2c <__floatsisf+0x6c>
 a22:	9a 95       	dec	r25
 a24:	66 0f       	add	r22, r22
 a26:	77 1f       	adc	r23, r23
 a28:	88 1f       	adc	r24, r24
 a2a:	da f7       	brpl	.-10     	; 0xa22 <__floatsisf+0x62>
 a2c:	88 0f       	add	r24, r24
 a2e:	96 95       	lsr	r25
 a30:	87 95       	ror	r24
 a32:	97 f9       	bld	r25, 7
 a34:	08 95       	ret

00000a36 <__fp_inf>:
 a36:	97 f9       	bld	r25, 7
 a38:	9f 67       	ori	r25, 0x7F	; 127
 a3a:	80 e8       	ldi	r24, 0x80	; 128
 a3c:	70 e0       	ldi	r23, 0x00	; 0
 a3e:	60 e0       	ldi	r22, 0x00	; 0
 a40:	08 95       	ret

00000a42 <__fp_nan>:
 a42:	9f ef       	ldi	r25, 0xFF	; 255
 a44:	80 ec       	ldi	r24, 0xC0	; 192
 a46:	08 95       	ret

00000a48 <__fp_pscA>:
 a48:	00 24       	eor	r0, r0
 a4a:	0a 94       	dec	r0
 a4c:	16 16       	cp	r1, r22
 a4e:	17 06       	cpc	r1, r23
 a50:	18 06       	cpc	r1, r24
 a52:	09 06       	cpc	r0, r25
 a54:	08 95       	ret

00000a56 <__fp_pscB>:
 a56:	00 24       	eor	r0, r0
 a58:	0a 94       	dec	r0
 a5a:	12 16       	cp	r1, r18
 a5c:	13 06       	cpc	r1, r19
 a5e:	14 06       	cpc	r1, r20
 a60:	05 06       	cpc	r0, r21
 a62:	08 95       	ret

00000a64 <__fp_round>:
 a64:	09 2e       	mov	r0, r25
 a66:	03 94       	inc	r0
 a68:	00 0c       	add	r0, r0
 a6a:	11 f4       	brne	.+4      	; 0xa70 <__fp_round+0xc>
 a6c:	88 23       	and	r24, r24
 a6e:	52 f0       	brmi	.+20     	; 0xa84 <__fp_round+0x20>
 a70:	bb 0f       	add	r27, r27
 a72:	40 f4       	brcc	.+16     	; 0xa84 <__fp_round+0x20>
 a74:	bf 2b       	or	r27, r31
 a76:	11 f4       	brne	.+4      	; 0xa7c <__fp_round+0x18>
 a78:	60 ff       	sbrs	r22, 0
 a7a:	04 c0       	rjmp	.+8      	; 0xa84 <__fp_round+0x20>
 a7c:	6f 5f       	subi	r22, 0xFF	; 255
 a7e:	7f 4f       	sbci	r23, 0xFF	; 255
 a80:	8f 4f       	sbci	r24, 0xFF	; 255
 a82:	9f 4f       	sbci	r25, 0xFF	; 255
 a84:	08 95       	ret

00000a86 <__fp_split3>:
 a86:	57 fd       	sbrc	r21, 7
 a88:	90 58       	subi	r25, 0x80	; 128
 a8a:	44 0f       	add	r20, r20
 a8c:	55 1f       	adc	r21, r21
 a8e:	59 f0       	breq	.+22     	; 0xaa6 <__fp_splitA+0x10>
 a90:	5f 3f       	cpi	r21, 0xFF	; 255
 a92:	71 f0       	breq	.+28     	; 0xab0 <__fp_splitA+0x1a>
 a94:	47 95       	ror	r20

00000a96 <__fp_splitA>:
 a96:	88 0f       	add	r24, r24
 a98:	97 fb       	bst	r25, 7
 a9a:	99 1f       	adc	r25, r25
 a9c:	61 f0       	breq	.+24     	; 0xab6 <__fp_splitA+0x20>
 a9e:	9f 3f       	cpi	r25, 0xFF	; 255
 aa0:	79 f0       	breq	.+30     	; 0xac0 <__fp_splitA+0x2a>
 aa2:	87 95       	ror	r24
 aa4:	08 95       	ret
 aa6:	12 16       	cp	r1, r18
 aa8:	13 06       	cpc	r1, r19
 aaa:	14 06       	cpc	r1, r20
 aac:	55 1f       	adc	r21, r21
 aae:	f2 cf       	rjmp	.-28     	; 0xa94 <__fp_split3+0xe>
 ab0:	46 95       	lsr	r20
 ab2:	f1 df       	rcall	.-30     	; 0xa96 <__fp_splitA>
 ab4:	08 c0       	rjmp	.+16     	; 0xac6 <__fp_splitA+0x30>
 ab6:	16 16       	cp	r1, r22
 ab8:	17 06       	cpc	r1, r23
 aba:	18 06       	cpc	r1, r24
 abc:	99 1f       	adc	r25, r25
 abe:	f1 cf       	rjmp	.-30     	; 0xaa2 <__fp_splitA+0xc>
 ac0:	86 95       	lsr	r24
 ac2:	71 05       	cpc	r23, r1
 ac4:	61 05       	cpc	r22, r1
 ac6:	08 94       	sec
 ac8:	08 95       	ret

00000aca <__fp_zero>:
 aca:	e8 94       	clt

00000acc <__fp_szero>:
 acc:	bb 27       	eor	r27, r27
 ace:	66 27       	eor	r22, r22
 ad0:	77 27       	eor	r23, r23
 ad2:	cb 01       	movw	r24, r22
 ad4:	97 f9       	bld	r25, 7
 ad6:	08 95       	ret

00000ad8 <__mulsf3>:
 ad8:	0e 94 7f 05 	call	0xafe	; 0xafe <__mulsf3x>
 adc:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__fp_round>
 ae0:	0e 94 24 05 	call	0xa48	; 0xa48 <__fp_pscA>
 ae4:	38 f0       	brcs	.+14     	; 0xaf4 <__mulsf3+0x1c>
 ae6:	0e 94 2b 05 	call	0xa56	; 0xa56 <__fp_pscB>
 aea:	20 f0       	brcs	.+8      	; 0xaf4 <__mulsf3+0x1c>
 aec:	95 23       	and	r25, r21
 aee:	11 f0       	breq	.+4      	; 0xaf4 <__mulsf3+0x1c>
 af0:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <__fp_inf>
 af4:	0c 94 21 05 	jmp	0xa42	; 0xa42 <__fp_nan>
 af8:	11 24       	eor	r1, r1
 afa:	0c 94 66 05 	jmp	0xacc	; 0xacc <__fp_szero>

00000afe <__mulsf3x>:
 afe:	0e 94 43 05 	call	0xa86	; 0xa86 <__fp_split3>
 b02:	70 f3       	brcs	.-36     	; 0xae0 <__mulsf3+0x8>

00000b04 <__mulsf3_pse>:
 b04:	95 9f       	mul	r25, r21
 b06:	c1 f3       	breq	.-16     	; 0xaf8 <__mulsf3+0x20>
 b08:	95 0f       	add	r25, r21
 b0a:	50 e0       	ldi	r21, 0x00	; 0
 b0c:	55 1f       	adc	r21, r21
 b0e:	62 9f       	mul	r22, r18
 b10:	f0 01       	movw	r30, r0
 b12:	72 9f       	mul	r23, r18
 b14:	bb 27       	eor	r27, r27
 b16:	f0 0d       	add	r31, r0
 b18:	b1 1d       	adc	r27, r1
 b1a:	63 9f       	mul	r22, r19
 b1c:	aa 27       	eor	r26, r26
 b1e:	f0 0d       	add	r31, r0
 b20:	b1 1d       	adc	r27, r1
 b22:	aa 1f       	adc	r26, r26
 b24:	64 9f       	mul	r22, r20
 b26:	66 27       	eor	r22, r22
 b28:	b0 0d       	add	r27, r0
 b2a:	a1 1d       	adc	r26, r1
 b2c:	66 1f       	adc	r22, r22
 b2e:	82 9f       	mul	r24, r18
 b30:	22 27       	eor	r18, r18
 b32:	b0 0d       	add	r27, r0
 b34:	a1 1d       	adc	r26, r1
 b36:	62 1f       	adc	r22, r18
 b38:	73 9f       	mul	r23, r19
 b3a:	b0 0d       	add	r27, r0
 b3c:	a1 1d       	adc	r26, r1
 b3e:	62 1f       	adc	r22, r18
 b40:	83 9f       	mul	r24, r19
 b42:	a0 0d       	add	r26, r0
 b44:	61 1d       	adc	r22, r1
 b46:	22 1f       	adc	r18, r18
 b48:	74 9f       	mul	r23, r20
 b4a:	33 27       	eor	r19, r19
 b4c:	a0 0d       	add	r26, r0
 b4e:	61 1d       	adc	r22, r1
 b50:	23 1f       	adc	r18, r19
 b52:	84 9f       	mul	r24, r20
 b54:	60 0d       	add	r22, r0
 b56:	21 1d       	adc	r18, r1
 b58:	82 2f       	mov	r24, r18
 b5a:	76 2f       	mov	r23, r22
 b5c:	6a 2f       	mov	r22, r26
 b5e:	11 24       	eor	r1, r1
 b60:	9f 57       	subi	r25, 0x7F	; 127
 b62:	50 40       	sbci	r21, 0x00	; 0
 b64:	9a f0       	brmi	.+38     	; 0xb8c <__mulsf3_pse+0x88>
 b66:	f1 f0       	breq	.+60     	; 0xba4 <__mulsf3_pse+0xa0>
 b68:	88 23       	and	r24, r24
 b6a:	4a f0       	brmi	.+18     	; 0xb7e <__mulsf3_pse+0x7a>
 b6c:	ee 0f       	add	r30, r30
 b6e:	ff 1f       	adc	r31, r31
 b70:	bb 1f       	adc	r27, r27
 b72:	66 1f       	adc	r22, r22
 b74:	77 1f       	adc	r23, r23
 b76:	88 1f       	adc	r24, r24
 b78:	91 50       	subi	r25, 0x01	; 1
 b7a:	50 40       	sbci	r21, 0x00	; 0
 b7c:	a9 f7       	brne	.-22     	; 0xb68 <__mulsf3_pse+0x64>
 b7e:	9e 3f       	cpi	r25, 0xFE	; 254
 b80:	51 05       	cpc	r21, r1
 b82:	80 f0       	brcs	.+32     	; 0xba4 <__mulsf3_pse+0xa0>
 b84:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <__fp_inf>
 b88:	0c 94 66 05 	jmp	0xacc	; 0xacc <__fp_szero>
 b8c:	5f 3f       	cpi	r21, 0xFF	; 255
 b8e:	e4 f3       	brlt	.-8      	; 0xb88 <__mulsf3_pse+0x84>
 b90:	98 3e       	cpi	r25, 0xE8	; 232
 b92:	d4 f3       	brlt	.-12     	; 0xb88 <__mulsf3_pse+0x84>
 b94:	86 95       	lsr	r24
 b96:	77 95       	ror	r23
 b98:	67 95       	ror	r22
 b9a:	b7 95       	ror	r27
 b9c:	f7 95       	ror	r31
 b9e:	e7 95       	ror	r30
 ba0:	9f 5f       	subi	r25, 0xFF	; 255
 ba2:	c1 f7       	brne	.-16     	; 0xb94 <__mulsf3_pse+0x90>
 ba4:	fe 2b       	or	r31, r30
 ba6:	88 0f       	add	r24, r24
 ba8:	91 1d       	adc	r25, r1
 baa:	96 95       	lsr	r25
 bac:	87 95       	ror	r24
 bae:	97 f9       	bld	r25, 7
 bb0:	08 95       	ret

00000bb2 <_exit>:
 bb2:	f8 94       	cli

00000bb4 <__stop_program>:
 bb4:	ff cf       	rjmp	.-2      	; 0xbb4 <__stop_program>
