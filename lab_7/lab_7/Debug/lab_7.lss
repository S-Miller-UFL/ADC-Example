
lab_7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00802000  000005b4  00000648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00802002  00802002  0000064a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000064a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000067c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000532c  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ce3  00000000  00000000  00005a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000068d  00000000  00000000  0000971b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00009da8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000044cb  00000000  00000000  00009eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000294  00000000  00000000  0000e3b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000e64b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 29 02 	jmp	0x452	; 0x452 <__vector_71>
 120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__vector_88>
 164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e4 eb       	ldi	r30, 0xB4	; 180
 21c:	f5 e0       	ldi	r31, 0x05	; 5
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a2 30       	cpi	r26, 0x02	; 2
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	20 e2       	ldi	r18, 0x20	; 32
 232:	a2 e0       	ldi	r26, 0x02	; 2
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a7 30       	cpi	r26, 0x07	; 7
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 26 01 	call	0x24c	; 0x24c <main>
 244:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <main>:
volatile int8_t bscale = -6;
volatile uint8_t adca_ready;
volatile uint8_t light_true;
volatile uint8_t function_true;
int main(void)
{
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	1f 92       	push	r1
 252:	1f 92       	push	r1
 254:	cd b7       	in	r28, 0x3d	; 61
 256:	de b7       	in	r29, 0x3e	; 62
	int8_t upperbyte = 0;
 258:	19 82       	std	Y+1, r1	; 0x01
	int8_t lowerbyte =0;
 25a:	1a 82       	std	Y+2, r1	; 0x02
	//initialize ADC
	adc_init();
 25c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <adc_init>
	//initialize tcc0
	tcc0_init();
 260:	0e 94 bf 01 	call	0x37e	; 0x37e <tcc0_init>
	//initialize interrupts
	inter_init();
 264:	0e 94 b1 01 	call	0x362	; 0x362 <inter_init>
	//initialize usartd0
	usartd0_init();
 268:	0e 94 e6 01 	call	0x3cc	; 0x3cc <usartd0_init>
	//start timer counter
	TCC0.CTRLA = TC_CLKSEL_DIV64_gc;
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	98 e0       	ldi	r25, 0x08	; 8
 270:	25 e0       	ldi	r18, 0x05	; 5
 272:	fc 01       	movw	r30, r24
 274:	20 83       	st	Z, r18
	while (1)
	{
		if(adca_ready)
 276:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <adca_ready>
 27a:	88 23       	and	r24, r24
 27c:	e1 f3       	breq	.-8      	; 0x276 <main+0x2a>
		{
			upperbyte = (ADCA.CH0.RESH<<0);
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	92 e0       	ldi	r25, 0x02	; 2
 282:	fc 01       	movw	r30, r24
 284:	85 a1       	ldd	r24, Z+37	; 0x25
 286:	89 83       	std	Y+1, r24	; 0x01
			lowerbyte = (ADCA.CH0.RESL<<0);
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	92 e0       	ldi	r25, 0x02	; 2
 28c:	fc 01       	movw	r30, r24
 28e:	84 a1       	ldd	r24, Z+36	; 0x24
 290:	8a 83       	std	Y+2, r24	; 0x02
			//output adca result to computer
			USARTD0.DATA = lowerbyte;
 292:	80 ea       	ldi	r24, 0xA0	; 160
 294:	99 e0       	ldi	r25, 0x09	; 9
 296:	2a 81       	ldd	r18, Y+2	; 0x02
 298:	fc 01       	movw	r30, r24
 29a:	20 83       	st	Z, r18
			while(!(USARTD0.STATUS & USART_DREIF_bm))
 29c:	00 00       	nop
 29e:	80 ea       	ldi	r24, 0xA0	; 160
 2a0:	99 e0       	ldi	r25, 0x09	; 9
 2a2:	fc 01       	movw	r30, r24
 2a4:	81 81       	ldd	r24, Z+1	; 0x01
 2a6:	88 2f       	mov	r24, r24
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	80 72       	andi	r24, 0x20	; 32
 2ac:	99 27       	eor	r25, r25
 2ae:	89 2b       	or	r24, r25
 2b0:	b1 f3       	breq	.-20     	; 0x29e <main+0x52>
			{
				//do nothing
			}
			USARTD0.DATA = upperbyte;
 2b2:	80 ea       	ldi	r24, 0xA0	; 160
 2b4:	99 e0       	ldi	r25, 0x09	; 9
 2b6:	29 81       	ldd	r18, Y+1	; 0x01
 2b8:	fc 01       	movw	r30, r24
 2ba:	20 83       	st	Z, r18
			while(!(USARTD0.STATUS & USART_DREIF_bm))
 2bc:	00 00       	nop
 2be:	80 ea       	ldi	r24, 0xA0	; 160
 2c0:	99 e0       	ldi	r25, 0x09	; 9
 2c2:	fc 01       	movw	r30, r24
 2c4:	81 81       	ldd	r24, Z+1	; 0x01
 2c6:	88 2f       	mov	r24, r24
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	80 72       	andi	r24, 0x20	; 32
 2cc:	99 27       	eor	r25, r25
 2ce:	89 2b       	or	r24, r25
 2d0:	b1 f3       	breq	.-20     	; 0x2be <main+0x72>
			{
				//do nothing
			}
			//reset adca
			adca_ready =0;
 2d2:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <adca_ready>
		}
	}
 2d6:	cf cf       	rjmp	.-98     	; 0x276 <main+0x2a>

000002d8 <adc_init>:
}

//NOTE THAT PHOTORESISTOR IS SET AS DEFAULT UPON BOOTUP
void adc_init(void)
{
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
	//set port a pin 1 and 6 as inputs
	PORTA.DIRCLR = (PIN1_bm|PIN6_bm|PIN5_bm|PIN4_bm);
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	96 e0       	ldi	r25, 0x06	; 6
 2e4:	22 e7       	ldi	r18, 0x72	; 114
 2e6:	fc 01       	movw	r30, r24
 2e8:	22 83       	std	Z+2, r18	; 0x02
	//set adca as 12 bit signed right adjusted
	ADCA.CTRLB = (ADC_CONMODE_bm|ADC_RESOLUTION_12BIT_gc);
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	92 e0       	ldi	r25, 0x02	; 2
 2ee:	20 e1       	ldi	r18, 0x10	; 16
 2f0:	fc 01       	movw	r30, r24
 2f2:	21 83       	std	Z+1, r18	; 0x01
	//set adca reference voltage to +2.5V
	ADCA.REFCTRL = (0|ADC_REFSEL_AREFB_gc);
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	92 e0       	ldi	r25, 0x02	; 2
 2f8:	20 e3       	ldi	r18, 0x30	; 48
 2fa:	fc 01       	movw	r30, r24
 2fc:	22 83       	std	Z+2, r18	; 0x02
	//set adca channel 0 to differential with gain x1
	ADCA.CH0.CTRL = (ADC_CH_INPUTMODE_DIFFWGAIN_gc|ADC_CH_GAIN1_bm);
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	92 e0       	ldi	r25, 0x02	; 2
 302:	2b e0       	ldi	r18, 0x0B	; 11
 304:	fc 01       	movw	r30, r24
 306:	20 a3       	std	Z+32, r18	; 0x20
	//lower ADCA sampling
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	92 e0       	ldi	r25, 0x02	; 2
 30c:	27 e0       	ldi	r18, 0x07	; 7
 30e:	fc 01       	movw	r30, r24
 310:	24 83       	std	Z+4, r18	; 0x04
	//set adca muxpos to port A pin 1 and pin 6
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN1_gc|ADC_CH_MUXNEG_PIN6_gc);
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	92 e0       	ldi	r25, 0x02	; 2
 316:	2a e0       	ldi	r18, 0x0A	; 10
 318:	fc 01       	movw	r30, r24
 31a:	21 a3       	std	Z+33, r18	; 0x21
	//enable interrupts on ADCA ch0
	ADCA.CH0.INTCTRL = (ADC_CH_INTMODE_COMPLETE_gc|ADC_CH_INTLVL_MED_gc);
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	92 e0       	ldi	r25, 0x02	; 2
 320:	22 e0       	ldi	r18, 0x02	; 2
 322:	fc 01       	movw	r30, r24
 324:	22 a3       	std	Z+34, r18	; 0x22
	//enable conversion trigger on channel event 0
	ADCA.EVCTRL= (ADC_EVSEL_0123_gc|ADC_EVACT_CH0_gc);
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	92 e0       	ldi	r25, 0x02	; 2
 32a:	21 e0       	ldi	r18, 0x01	; 1
 32c:	fc 01       	movw	r30, r24
 32e:	23 83       	std	Z+3, r18	; 0x03
	//load calibration register with factory values
	ADCA.CALL = ADCA_CALL;
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	92 e0       	ldi	r25, 0x02	; 2
 334:	2c e0       	ldi	r18, 0x0C	; 12
 336:	32 e0       	ldi	r19, 0x02	; 2
 338:	f9 01       	movw	r30, r18
 33a:	20 81       	ld	r18, Z
 33c:	fc 01       	movw	r30, r24
 33e:	24 87       	std	Z+12, r18	; 0x0c
	ADCA.CALH = ADCA_CALH;
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	92 e0       	ldi	r25, 0x02	; 2
 344:	2d e0       	ldi	r18, 0x0D	; 13
 346:	32 e0       	ldi	r19, 0x02	; 2
 348:	f9 01       	movw	r30, r18
 34a:	20 81       	ld	r18, Z
 34c:	fc 01       	movw	r30, r24
 34e:	25 87       	std	Z+13, r18	; 0x0d
	//ENABLE ADC
	ADCA.CTRLA = (ADC_ENABLE_bm);
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	92 e0       	ldi	r25, 0x02	; 2
 354:	21 e0       	ldi	r18, 0x01	; 1
 356:	fc 01       	movw	r30, r24
 358:	20 83       	st	Z, r18
}
 35a:	00 00       	nop
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <inter_init>:

void inter_init(void)
{
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
	//enable medium level interrupts in pmic
	PMIC.CTRL = PMIC_MEDLVLEN_bm;
 36a:	80 ea       	ldi	r24, 0xA0	; 160
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	22 e0       	ldi	r18, 0x02	; 2
 370:	fc 01       	movw	r30, r24
 372:	22 83       	std	Z+2, r18	; 0x02
	//enable global interrupts
	sei();
 374:	78 94       	sei
}
 376:	00 00       	nop
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	08 95       	ret

0000037e <tcc0_init>:
void tcc0_init(void)
{
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	00 d0       	rcall	.+0      	; 0x384 <tcc0_init+0x6>
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
	uint16_t period =  115;
 388:	83 e7       	ldi	r24, 0x73	; 115
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	89 83       	std	Y+1, r24	; 0x01
 38e:	9a 83       	std	Y+2, r25	; 0x02
	uint8_t offset = 0;
 390:	1b 82       	std	Y+3, r1	; 0x03
	//load tcc0 period register
	TCC0.PER = period + offset;
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	98 e0       	ldi	r25, 0x08	; 8
 396:	2b 81       	ldd	r18, Y+3	; 0x03
 398:	42 2f       	mov	r20, r18
 39a:	50 e0       	ldi	r21, 0x00	; 0
 39c:	29 81       	ldd	r18, Y+1	; 0x01
 39e:	3a 81       	ldd	r19, Y+2	; 0x02
 3a0:	24 0f       	add	r18, r20
 3a2:	35 1f       	adc	r19, r21
 3a4:	fc 01       	movw	r30, r24
 3a6:	26 a3       	std	Z+38, r18	; 0x26
 3a8:	37 a3       	std	Z+39, r19	; 0x27
	TCC0.CNT = 0;
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	98 e0       	ldi	r25, 0x08	; 8
 3ae:	fc 01       	movw	r30, r24
 3b0:	10 a2       	std	Z+32, r1	; 0x20
 3b2:	11 a2       	std	Z+33, r1	; 0x21
	//set tcc0 as event channel 0 source
	EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
 3b4:	80 e8       	ldi	r24, 0x80	; 128
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	20 ec       	ldi	r18, 0xC0	; 192
 3ba:	fc 01       	movw	r30, r24
 3bc:	20 83       	st	Z, r18
}
 3be:	00 00       	nop
 3c0:	23 96       	adiw	r28, 0x03	; 3
 3c2:	cd bf       	out	0x3d, r28	; 61
 3c4:	de bf       	out	0x3e, r29	; 62
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	08 95       	ret

000003cc <usartd0_init>:

void usartd0_init(void)
{
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	cd b7       	in	r28, 0x3d	; 61
 3d2:	de b7       	in	r29, 0x3e	; 62
	//initialize transmitter and reciever pins
	PORTD.OUTSET = PIN3_bm;
 3d4:	80 e6       	ldi	r24, 0x60	; 96
 3d6:	96 e0       	ldi	r25, 0x06	; 6
 3d8:	28 e0       	ldi	r18, 0x08	; 8
 3da:	fc 01       	movw	r30, r24
 3dc:	25 83       	std	Z+5, r18	; 0x05
	PORTD.DIRSET = PIN3_bm;
 3de:	80 e6       	ldi	r24, 0x60	; 96
 3e0:	96 e0       	ldi	r25, 0x06	; 6
 3e2:	28 e0       	ldi	r18, 0x08	; 8
 3e4:	fc 01       	movw	r30, r24
 3e6:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 3e8:	80 e6       	ldi	r24, 0x60	; 96
 3ea:	96 e0       	ldi	r25, 0x06	; 6
 3ec:	24 e0       	ldi	r18, 0x04	; 4
 3ee:	fc 01       	movw	r30, r24
 3f0:	22 83       	std	Z+2, r18	; 0x02

	//set baud rate
	USARTD0.BAUDCTRLA = (uint8_t)bsel;
 3f2:	80 ea       	ldi	r24, 0xA0	; 160
 3f4:	99 e0       	ldi	r25, 0x09	; 9
 3f6:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 3fa:	fc 01       	movw	r30, r24
 3fc:	26 83       	std	Z+6, r18	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)((bscale << 4)|(bsel >> 4));
 3fe:	80 ea       	ldi	r24, 0xA0	; 160
 400:	99 e0       	ldi	r25, 0x09	; 9
 402:	20 91 01 20 	lds	r18, 0x2001	; 0x802001 <bscale>
 406:	02 2e       	mov	r0, r18
 408:	00 0c       	add	r0, r0
 40a:	33 0b       	sbc	r19, r19
 40c:	22 95       	swap	r18
 40e:	32 95       	swap	r19
 410:	30 7f       	andi	r19, 0xF0	; 240
 412:	32 27       	eor	r19, r18
 414:	20 7f       	andi	r18, 0xF0	; 240
 416:	32 27       	eor	r19, r18
 418:	32 2f       	mov	r19, r18
 41a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 41e:	25 95       	asr	r18
 420:	25 95       	asr	r18
 422:	25 95       	asr	r18
 424:	25 95       	asr	r18
 426:	23 2b       	or	r18, r19
 428:	fc 01       	movw	r30, r24
 42a:	27 83       	std	Z+7, r18	; 0x07

	//set to 8 bit odd parity with 1 stop bit
	USARTD0.CTRLC =	(USART_CMODE_ASYNCHRONOUS_gc |USART_PMODE_ODD_gc| USART_CHSIZE_8BIT_gc)&(~USART_SBMODE_bm);
 42c:	80 ea       	ldi	r24, 0xA0	; 160
 42e:	99 e0       	ldi	r25, 0x09	; 9
 430:	23 e3       	ldi	r18, 0x33	; 51
 432:	fc 01       	movw	r30, r24
 434:	25 83       	std	Z+5, r18	; 0x05

	//ENABLE TRANSMITTER AND RECIEVER
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 436:	80 ea       	ldi	r24, 0xA0	; 160
 438:	99 e0       	ldi	r25, 0x09	; 9
 43a:	28 e1       	ldi	r18, 0x18	; 24
 43c:	fc 01       	movw	r30, r24
 43e:	24 83       	std	Z+4, r18	; 0x04
	
	//enable interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc;
 440:	80 ea       	ldi	r24, 0xA0	; 160
 442:	99 e0       	ldi	r25, 0x09	; 9
 444:	20 e2       	ldi	r18, 0x20	; 32
 446:	fc 01       	movw	r30, r24
 448:	23 83       	std	Z+3, r18	; 0x03
}
 44a:	00 00       	nop
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	08 95       	ret

00000452 <__vector_71>:

ISR(ADCA_CH0_vect)
{
 452:	1f 92       	push	r1
 454:	0f 92       	push	r0
 456:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 45a:	0f 92       	push	r0
 45c:	11 24       	eor	r1, r1
 45e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 462:	0f 92       	push	r0
 464:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 468:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 46c:	0f 92       	push	r0
 46e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 472:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 476:	0f 92       	push	r0
 478:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 47c:	2f 93       	push	r18
 47e:	3f 93       	push	r19
 480:	8f 93       	push	r24
 482:	9f 93       	push	r25
 484:	ef 93       	push	r30
 486:	ff 93       	push	r31
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	cd b7       	in	r28, 0x3d	; 61
 48e:	de b7       	in	r29, 0x3e	; 62
	result = (ADCA.CH0.RESH<<8 | ADCA.CH0.RESL<<0);
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	92 e0       	ldi	r25, 0x02	; 2
 494:	fc 01       	movw	r30, r24
 496:	85 a1       	ldd	r24, Z+37	; 0x25
 498:	88 2f       	mov	r24, r24
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	38 2f       	mov	r19, r24
 49e:	22 27       	eor	r18, r18
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	92 e0       	ldi	r25, 0x02	; 2
 4a4:	fc 01       	movw	r30, r24
 4a6:	84 a1       	ldd	r24, Z+36	; 0x24
 4a8:	88 2f       	mov	r24, r24
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	82 2b       	or	r24, r18
 4ae:	93 2b       	or	r25, r19
 4b0:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <result>
 4b4:	90 93 06 20 	sts	0x2006, r25	; 0x802006 <result+0x1>
	//set ADCA_READY flag
	adca_ready = 1;
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	80 93 03 20 	sts	0x2003, r24	; 0x802003 <adca_ready>
	
}
 4be:	00 00       	nop
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	ff 91       	pop	r31
 4c6:	ef 91       	pop	r30
 4c8:	9f 91       	pop	r25
 4ca:	8f 91       	pop	r24
 4cc:	3f 91       	pop	r19
 4ce:	2f 91       	pop	r18
 4d0:	0f 90       	pop	r0
 4d2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 4d6:	0f 90       	pop	r0
 4d8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 4dc:	0f 90       	pop	r0
 4de:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 4e2:	0f 90       	pop	r0
 4e4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 4e8:	0f 90       	pop	r0
 4ea:	1f 90       	pop	r1
 4ec:	18 95       	reti

000004ee <__vector_88>:
ISR (USARTD0_RXC_vect)
{
 4ee:	1f 92       	push	r1
 4f0:	0f 92       	push	r0
 4f2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 4f6:	0f 92       	push	r0
 4f8:	11 24       	eor	r1, r1
 4fa:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 4fe:	0f 92       	push	r0
 500:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 504:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 508:	0f 92       	push	r0
 50a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 50e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 512:	0f 92       	push	r0
 514:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 518:	2f 93       	push	r18
 51a:	3f 93       	push	r19
 51c:	8f 93       	push	r24
 51e:	9f 93       	push	r25
 520:	ef 93       	push	r30
 522:	ff 93       	push	r31
 524:	cf 93       	push	r28
 526:	df 93       	push	r29
 528:	1f 92       	push	r1
 52a:	cd b7       	in	r28, 0x3d	; 61
 52c:	de b7       	in	r29, 0x3e	; 62
	char C = USARTD0.DATA;
 52e:	80 ea       	ldi	r24, 0xA0	; 160
 530:	99 e0       	ldi	r25, 0x09	; 9
 532:	fc 01       	movw	r30, r24
 534:	80 81       	ld	r24, Z
 536:	89 83       	std	Y+1, r24	; 0x01
	//SWITCH TO FUNCTION GENERATOR
	if(C == 'F')
 538:	89 81       	ldd	r24, Y+1	; 0x01
 53a:	86 34       	cpi	r24, 0x46	; 70
 53c:	79 f4       	brne	.+30     	; 0x55c <__vector_88+0x6e>
	{
		//switch ADCA inputs to function generator
		ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN5_gc|ADC_CH_MUXNEG_PIN4_gc);
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	92 e0       	ldi	r25, 0x02	; 2
 542:	28 e2       	ldi	r18, 0x28	; 40
 544:	fc 01       	movw	r30, r24
 546:	21 a3       	std	Z+33, r18	; 0x21
		//since ADCA could be in the middle of a conversion, we need to flush the ADC channel
		ADCA.CTRLA |= (ADC_FLUSH_bm);
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	92 e0       	ldi	r25, 0x02	; 2
 54c:	20 e0       	ldi	r18, 0x00	; 0
 54e:	32 e0       	ldi	r19, 0x02	; 2
 550:	f9 01       	movw	r30, r18
 552:	20 81       	ld	r18, Z
 554:	22 60       	ori	r18, 0x02	; 2
 556:	fc 01       	movw	r30, r24
 558:	20 83       	st	Z, r18
		//switch ADCA inputs to function generator
		ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN1_gc|ADC_CH_MUXNEG_PIN6_gc);
		//since ADCA could be in the middle of a conversion, we need to flush the ADC channel
		ADCA.CTRLA |= (ADC_FLUSH_bm);
	}
 55a:	11 c0       	rjmp	.+34     	; 0x57e <__vector_88+0x90>
		ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN5_gc|ADC_CH_MUXNEG_PIN4_gc);
		//since ADCA could be in the middle of a conversion, we need to flush the ADC channel
		ADCA.CTRLA |= (ADC_FLUSH_bm);
	}
	//SWITCH TO PHOTORESISTOR
	else if(C == 'L')
 55c:	89 81       	ldd	r24, Y+1	; 0x01
 55e:	8c 34       	cpi	r24, 0x4C	; 76
 560:	71 f4       	brne	.+28     	; 0x57e <__vector_88+0x90>
	{
		//switch ADCA inputs to function generator
		ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN1_gc|ADC_CH_MUXNEG_PIN6_gc);
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	92 e0       	ldi	r25, 0x02	; 2
 566:	2a e0       	ldi	r18, 0x0A	; 10
 568:	fc 01       	movw	r30, r24
 56a:	21 a3       	std	Z+33, r18	; 0x21
		//since ADCA could be in the middle of a conversion, we need to flush the ADC channel
		ADCA.CTRLA |= (ADC_FLUSH_bm);
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	92 e0       	ldi	r25, 0x02	; 2
 570:	20 e0       	ldi	r18, 0x00	; 0
 572:	32 e0       	ldi	r19, 0x02	; 2
 574:	f9 01       	movw	r30, r18
 576:	20 81       	ld	r18, Z
 578:	22 60       	ori	r18, 0x02	; 2
 57a:	fc 01       	movw	r30, r24
 57c:	20 83       	st	Z, r18
	}
 57e:	00 00       	nop
 580:	0f 90       	pop	r0
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	ff 91       	pop	r31
 588:	ef 91       	pop	r30
 58a:	9f 91       	pop	r25
 58c:	8f 91       	pop	r24
 58e:	3f 91       	pop	r19
 590:	2f 91       	pop	r18
 592:	0f 90       	pop	r0
 594:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 598:	0f 90       	pop	r0
 59a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 59e:	0f 90       	pop	r0
 5a0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 5a4:	0f 90       	pop	r0
 5a6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 5aa:	0f 90       	pop	r0
 5ac:	1f 90       	pop	r1
 5ae:	18 95       	reti

000005b0 <_exit>:
 5b0:	f8 94       	cli

000005b2 <__stop_program>:
 5b2:	ff cf       	rjmp	.-2      	; 0x5b2 <__stop_program>
