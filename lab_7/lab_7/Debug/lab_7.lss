
lab_7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004651  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003c96  00000000  00000000  00004a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000536  00000000  00000000  000086ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00008be4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000317d  00000000  00000000  00008c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000083  00000000  00000000  0000bdb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000be38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
   8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
   c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  10:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  14:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  18:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  1c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  20:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  24:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  28:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  2c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  30:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  34:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  38:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  3c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  40:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  44:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  48:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  4c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  50:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  54:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  58:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  5c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  60:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  64:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  68:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  6c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  70:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  74:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  78:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  7c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  80:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  84:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  88:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  8c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  90:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  94:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  98:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  9c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  ac:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  bc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  cc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  dc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  ec:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  fc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 100:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 104:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 108:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 10c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 110:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 114:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 118:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 11c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 120:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 124:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 128:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 12c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 130:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 134:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 138:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 13c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 140:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 144:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 148:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 14c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 150:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 154:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 158:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 15c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 160:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 164:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 168:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 16c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 170:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 174:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 178:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 17c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 180:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 184:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 188:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 18c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 190:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 194:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 198:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 19c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1ac:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1bc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1cc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1dc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1ec:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59
 214:	0e 94 10 01 	call	0x220	; 0x220 <main>
 218:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <_exit>

0000021c <__bad_interrupt>:
 21c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000220 <main>:
//*******************************************

#include <avr/io.h>
//definitions
int main(void)
{
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	00 d0       	rcall	.+0      	; 0x226 <main+0x6>
 226:	00 d0       	rcall	.+0      	; 0x228 <main+0x8>
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
	int16_t upperbyte = 0;
 22c:	19 82       	std	Y+1, r1	; 0x01
 22e:	1a 82       	std	Y+2, r1	; 0x02
	int16_t lowerbyte =0;
 230:	1b 82       	std	Y+3, r1	; 0x03
 232:	1c 82       	std	Y+4, r1	; 0x04
	int16_t data = 0;
 234:	1d 82       	std	Y+5, r1	; 0x05
 236:	1e 82       	std	Y+6, r1	; 0x06
	//initialize ADC
	adc_init();
 238:	0e 94 3f 01 	call	0x27e	; 0x27e <adc_init>
    while (1) 
    {
		//begin adca conversion on channel 0
		ADCA.CH0.CTRL |= (ADC_CH_START_bm);
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	92 e0       	ldi	r25, 0x02	; 2
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	32 e0       	ldi	r19, 0x02	; 2
 244:	f9 01       	movw	r30, r18
 246:	20 a1       	ldd	r18, Z+32	; 0x20
 248:	20 68       	ori	r18, 0x80	; 128
 24a:	fc 01       	movw	r30, r24
 24c:	20 a3       	std	Z+32, r18	; 0x20
		//check if interrupt flag set
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm))
 24e:	00 00       	nop
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	92 e0       	ldi	r25, 0x02	; 2
 254:	fc 01       	movw	r30, r24
 256:	83 a1       	ldd	r24, Z+35	; 0x23
 258:	88 2f       	mov	r24, r24
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	81 70       	andi	r24, 0x01	; 1
 25e:	99 27       	eor	r25, r25
 260:	89 2b       	or	r24, r25
 262:	b1 f3       	breq	.-20     	; 0x250 <main+0x30>
		{
			//do nothing
		}
		//clear interrupt flag
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	92 e0       	ldi	r25, 0x02	; 2
 268:	21 e0       	ldi	r18, 0x01	; 1
 26a:	fc 01       	movw	r30, r24
 26c:	23 a3       	std	Z+35, r18	; 0x23
		//store result
		data = (ADCA.CH0.RES);
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	92 e0       	ldi	r25, 0x02	; 2
 272:	fc 01       	movw	r30, r24
 274:	84 a1       	ldd	r24, Z+36	; 0x24
 276:	95 a1       	ldd	r25, Z+37	; 0x25
 278:	8d 83       	std	Y+5, r24	; 0x05
 27a:	9e 83       	std	Y+6, r25	; 0x06
    }
 27c:	df cf       	rjmp	.-66     	; 0x23c <main+0x1c>

0000027e <adc_init>:
}

void adc_init(void)
{
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
	//set port a pin 1 and 6 as inputs
	PORTA.DIRCLR = (PIN1_bm|PIN6_bm);
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	96 e0       	ldi	r25, 0x06	; 6
 28a:	22 e4       	ldi	r18, 0x42	; 66
 28c:	fc 01       	movw	r30, r24
 28e:	22 83       	std	Z+2, r18	; 0x02
	//set adca as 12 bit signed right adjusted
	ADCA.CTRLB = (ADC_CONMODE_bm|ADC_RESOLUTION_12BIT_gc);
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	92 e0       	ldi	r25, 0x02	; 2
 294:	20 e1       	ldi	r18, 0x10	; 16
 296:	fc 01       	movw	r30, r24
 298:	21 83       	std	Z+1, r18	; 0x01
	//set adca reference voltage to +2.5V
	ADCA.REFCTRL = (0|ADC_REFSEL_AREFB_gc);
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	92 e0       	ldi	r25, 0x02	; 2
 29e:	20 e3       	ldi	r18, 0x30	; 48
 2a0:	fc 01       	movw	r30, r24
 2a2:	22 83       	std	Z+2, r18	; 0x02
	//set adca channel 0 to differential with gain x1
	ADCA.CH0.CTRL = (ADC_CH_INPUTMODE_DIFFWGAIN_gc);
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	92 e0       	ldi	r25, 0x02	; 2
 2a8:	23 e0       	ldi	r18, 0x03	; 3
 2aa:	fc 01       	movw	r30, r24
 2ac:	20 a3       	std	Z+32, r18	; 0x20
	//lower ADCA sampling
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	92 e0       	ldi	r25, 0x02	; 2
 2b2:	27 e0       	ldi	r18, 0x07	; 7
 2b4:	fc 01       	movw	r30, r24
 2b6:	24 83       	std	Z+4, r18	; 0x04
	//set adca muxpos to port A pin 1 and pin 6
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN1_gc|ADC_CH_MUXNEG_PIN6_gc);
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	92 e0       	ldi	r25, 0x02	; 2
 2bc:	2a e0       	ldi	r18, 0x0A	; 10
 2be:	fc 01       	movw	r30, r24
 2c0:	21 a3       	std	Z+33, r18	; 0x21
	//ENABLE ADC
	ADCA.CTRLA = (ADC_ENABLE_bm);
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	92 e0       	ldi	r25, 0x02	; 2
 2c6:	21 e0       	ldi	r18, 0x01	; 1
 2c8:	fc 01       	movw	r30, r24
 2ca:	20 83       	st	Z, r18
 2cc:	00 00       	nop
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>
