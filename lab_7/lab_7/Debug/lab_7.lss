
lab_7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000049ae  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003dc1  00000000  00000000  00004eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000727  00000000  00000000  00008c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  00009394  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003118  00000000  00000000  0000949c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d0  00000000  00000000  0000c5b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000c784  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
   8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
   c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  10:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  14:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  18:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  1c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  20:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  24:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  28:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  2c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  30:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  34:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  38:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  3c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  40:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  44:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  48:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  4c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  50:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  54:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  58:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  5c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  60:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  64:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  68:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  6c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  70:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  74:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  78:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  7c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  80:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  84:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  88:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  8c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  90:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  94:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  98:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  9c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  ac:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  bc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  cc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  dc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  ec:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  fc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 100:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 104:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 108:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 10c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 110:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 114:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 118:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 11c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 120:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 124:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 128:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 12c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 130:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 134:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 138:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 13c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 140:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 144:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 148:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 14c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 150:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 154:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 158:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 15c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 160:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 164:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 168:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 16c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 170:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 174:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 178:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 17c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 180:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 184:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 188:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 18c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 190:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 194:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 198:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 19c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1ac:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1bc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1cc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1dc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1ec:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59
 214:	0e 94 10 01 	call	0x220	; 0x220 <main>
 218:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <_exit>

0000021c <__bad_interrupt>:
 21c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000220 <main>:
#include <avr/io.h>
#include "usart.h"
//definitions
#define ADC_CONVMODE_NORMAL_BM (0X01<<4)
int main(void)
{
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	cd b7       	in	r28, 0x3d	; 61
 226:	de b7       	in	r29, 0x3e	; 62
 228:	28 97       	sbiw	r28, 0x08	; 8
 22a:	cd bf       	out	0x3d, r28	; 61
 22c:	de bf       	out	0x3e, r29	; 62
	int16_t upperbyte = 0;
 22e:	19 82       	std	Y+1, r1	; 0x01
 230:	1a 82       	std	Y+2, r1	; 0x02
	int16_t lowerbyte =0;
 232:	1b 82       	std	Y+3, r1	; 0x03
 234:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t upperbyte_usart = 0;
 236:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t lowerbyte_usart =0;
 238:	1e 82       	std	Y+6, r1	; 0x06
	int16_t data = 0;
 23a:	1f 82       	std	Y+7, r1	; 0x07
 23c:	18 86       	std	Y+8, r1	; 0x08
	//initialize ADC
	adc_init();
 23e:	0e 94 66 01 	call	0x2cc	; 0x2cc <adc_init>
	usartd0_init();
 242:	0e 94 a0 01 	call	0x340	; 0x340 <usartd0_init>
    while (1) 
    {
		//begin adca conversion on channel 0
		ADCA.CH0.CTRL = (ADCA.CH0.CTRL|ADC_CH_START_bm);
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	92 e0       	ldi	r25, 0x02	; 2
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	32 e0       	ldi	r19, 0x02	; 2
 24e:	f9 01       	movw	r30, r18
 250:	20 a1       	ldd	r18, Z+32	; 0x20
 252:	20 68       	ori	r18, 0x80	; 128
 254:	fc 01       	movw	r30, r24
 256:	20 a3       	std	Z+32, r18	; 0x20
		//check if interrupt flag set
		while(!(ADCA.CH0.INTFLAGS & ADCA_CH0_INTFLAGS))
 258:	00 00       	nop
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	92 e0       	ldi	r25, 0x02	; 2
 25e:	fc 01       	movw	r30, r24
 260:	23 a1       	ldd	r18, Z+35	; 0x23
 262:	83 e2       	ldi	r24, 0x23	; 35
 264:	92 e0       	ldi	r25, 0x02	; 2
 266:	fc 01       	movw	r30, r24
 268:	80 81       	ld	r24, Z
 26a:	82 23       	and	r24, r18
 26c:	88 23       	and	r24, r24
 26e:	a9 f3       	breq	.-22     	; 0x25a <main+0x3a>
		{
			//do nothing
		}
		//store result
		upperbyte = (ADCA.CH0.RESH<<7);
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	92 e0       	ldi	r25, 0x02	; 2
 274:	fc 01       	movw	r30, r24
 276:	85 a1       	ldd	r24, Z+37	; 0x25
 278:	88 2f       	mov	r24, r24
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	96 95       	lsr	r25
 27e:	98 2f       	mov	r25, r24
 280:	88 27       	eor	r24, r24
 282:	97 95       	ror	r25
 284:	87 95       	ror	r24
 286:	89 83       	std	Y+1, r24	; 0x01
 288:	9a 83       	std	Y+2, r25	; 0x02
		lowerbyte = (ADCA.CH0.RESL<<0);
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	92 e0       	ldi	r25, 0x02	; 2
 28e:	fc 01       	movw	r30, r24
 290:	84 a1       	ldd	r24, Z+36	; 0x24
 292:	88 2f       	mov	r24, r24
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	8b 83       	std	Y+3, r24	; 0x03
 298:	9c 83       	std	Y+4, r25	; 0x04
		data = (upperbyte|lowerbyte);
 29a:	29 81       	ldd	r18, Y+1	; 0x01
 29c:	3a 81       	ldd	r19, Y+2	; 0x02
 29e:	8b 81       	ldd	r24, Y+3	; 0x03
 2a0:	9c 81       	ldd	r25, Y+4	; 0x04
 2a2:	82 2b       	or	r24, r18
 2a4:	93 2b       	or	r25, r19
 2a6:	8f 83       	std	Y+7, r24	; 0x07
 2a8:	98 87       	std	Y+8, r25	; 0x08
		//TEST CODE
		upperbyte_usart = (ADCA.CH0.RESH<<0);
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	92 e0       	ldi	r25, 0x02	; 2
 2ae:	fc 01       	movw	r30, r24
 2b0:	85 a1       	ldd	r24, Z+37	; 0x25
 2b2:	8d 83       	std	Y+5, r24	; 0x05
		lowerbyte_usart = (ADCA.CH0.RESL<<0);
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	92 e0       	ldi	r25, 0x02	; 2
 2b8:	fc 01       	movw	r30, r24
 2ba:	84 a1       	ldd	r24, Z+36	; 0x24
 2bc:	8e 83       	std	Y+6, r24	; 0x06
		usartd0_out_char(lowerbyte_usart);
 2be:	8e 81       	ldd	r24, Y+6	; 0x06
 2c0:	0e 94 cb 01 	call	0x396	; 0x396 <usartd0_out_char>
		usartd0_out_char(upperbyte_usart);
 2c4:	8d 81       	ldd	r24, Y+5	; 0x05
 2c6:	0e 94 cb 01 	call	0x396	; 0x396 <usartd0_out_char>
    }
 2ca:	bd cf       	rjmp	.-134    	; 0x246 <main+0x26>

000002cc <adc_init>:
}

void adc_init(void)
{
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
	
	//set port a pin 1 and 6 as inputs
	PORTA.DIRCLR = (PIN1_bm|PIN6_bm);
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	96 e0       	ldi	r25, 0x06	; 6
 2d8:	22 e4       	ldi	r18, 0x42	; 66
 2da:	fc 01       	movw	r30, r24
 2dc:	22 83       	std	Z+2, r18	; 0x02
	//set adca as 12 bit signed right adjusted
	ADCA.CTRLB = (ADC_CONVMODE_NORMAL_BM|ADC_RESOLUTION_12BIT_gc);
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	92 e0       	ldi	r25, 0x02	; 2
 2e2:	20 e1       	ldi	r18, 0x10	; 16
 2e4:	fc 01       	movw	r30, r24
 2e6:	21 83       	std	Z+1, r18	; 0x01
	//set adca reference voltage to aref
	ADCA.REFCTRL = (0|ADC_REFSEL_AREFA_gc);
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	92 e0       	ldi	r25, 0x02	; 2
 2ec:	20 e2       	ldi	r18, 0x20	; 32
 2ee:	fc 01       	movw	r30, r24
 2f0:	22 83       	std	Z+2, r18	; 0x02
	//set adca channel 0 to differential with gain x1
	ADCA.CH0.CTRL = (ADC_CH_INPUTMODE_DIFFWGAIN_gc|ADC_CH_GAIN1_bm);
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	92 e0       	ldi	r25, 0x02	; 2
 2f6:	2b e0       	ldi	r18, 0x0B	; 11
 2f8:	fc 01       	movw	r30, r24
 2fa:	20 a3       	std	Z+32, r18	; 0x20
	//set adca muxpos to port A pin 1 and pin 6
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS1_bm|ADC_CH_MUXNEG_PIN6_gc);
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	92 e0       	ldi	r25, 0x02	; 2
 300:	22 e1       	ldi	r18, 0x12	; 18
 302:	fc 01       	movw	r30, r24
 304:	21 a3       	std	Z+33, r18	; 0x21
	//load calibration register with factory values
	ADCA.CALL = ADCA_CALL;
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	92 e0       	ldi	r25, 0x02	; 2
 30a:	2c e0       	ldi	r18, 0x0C	; 12
 30c:	32 e0       	ldi	r19, 0x02	; 2
 30e:	f9 01       	movw	r30, r18
 310:	20 81       	ld	r18, Z
 312:	fc 01       	movw	r30, r24
 314:	24 87       	std	Z+12, r18	; 0x0c
	ADCA.CALH = ADCA_CALH;
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	92 e0       	ldi	r25, 0x02	; 2
 31a:	2d e0       	ldi	r18, 0x0D	; 13
 31c:	32 e0       	ldi	r19, 0x02	; 2
 31e:	f9 01       	movw	r30, r18
 320:	20 81       	ld	r18, Z
 322:	fc 01       	movw	r30, r24
 324:	25 87       	std	Z+13, r18	; 0x0d
	//ENABLE ADC
	ADCA.CTRLA = (ADCA.CTRLA|ADC_ENABLE_bm);
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	92 e0       	ldi	r25, 0x02	; 2
 32a:	20 e0       	ldi	r18, 0x00	; 0
 32c:	32 e0       	ldi	r19, 0x02	; 2
 32e:	f9 01       	movw	r30, r18
 330:	20 81       	ld	r18, Z
 332:	21 60       	ori	r18, 0x01	; 1
 334:	fc 01       	movw	r30, r24
 336:	20 83       	st	Z, r18
 338:	00 00       	nop
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <usartd0_init>:
{
  /* intentionally left blank */
}

void usartd0_init(void)
{
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	cd b7       	in	r28, 0x3d	; 61
 346:	de b7       	in	r29, 0x3e	; 62
  /* Configure relevant TxD and RxD pins. */
	PORTD.OUTSET = PIN3_bm;
 348:	80 e6       	ldi	r24, 0x60	; 96
 34a:	96 e0       	ldi	r25, 0x06	; 6
 34c:	28 e0       	ldi	r18, 0x08	; 8
 34e:	fc 01       	movw	r30, r24
 350:	25 83       	std	Z+5, r18	; 0x05
	PORTD.DIRSET = PIN3_bm;
 352:	80 e6       	ldi	r24, 0x60	; 96
 354:	96 e0       	ldi	r25, 0x06	; 6
 356:	28 e0       	ldi	r18, 0x08	; 8
 358:	fc 01       	movw	r30, r24
 35a:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 35c:	80 e6       	ldi	r24, 0x60	; 96
 35e:	96 e0       	ldi	r25, 0x06	; 6
 360:	24 e0       	ldi	r18, 0x04	; 4
 362:	fc 01       	movw	r30, r24
 364:	22 83       	std	Z+2, r18	; 0x02

  /* Configure baud rate. */
	USARTD0.BAUDCTRLA = (uint8_t)BSEL;
 366:	80 ea       	ldi	r24, 0xA0	; 160
 368:	99 e0       	ldi	r25, 0x09	; 9
 36a:	25 e0       	ldi	r18, 0x05	; 5
 36c:	fc 01       	movw	r30, r24
 36e:	26 83       	std	Z+6, r18	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)((BSCALE << 4)|(BSEL >> 8));
 370:	80 ea       	ldi	r24, 0xA0	; 160
 372:	99 e0       	ldi	r25, 0x09	; 9
 374:	20 ea       	ldi	r18, 0xA0	; 160
 376:	fc 01       	movw	r30, r24
 378:	27 83       	std	Z+7, r18	; 0x07

  /* Configure remainder of serial protocol. */
  /* (In this example, a protocol with 8 data bits, no parity, and
   *  one stop bit is chosen.) */
	USARTD0.CTRLC =	(USART_CMODE_ASYNCHRONOUS_gc |USART_PMODE_DISABLED_gc| USART_CHSIZE_8BIT_gc)&(~USART_SBMODE_bm);
 37a:	80 ea       	ldi	r24, 0xA0	; 160
 37c:	99 e0       	ldi	r25, 0x09	; 9
 37e:	23 e0       	ldi	r18, 0x03	; 3
 380:	fc 01       	movw	r30, r24
 382:	25 83       	std	Z+5, r18	; 0x05

  /* Enable receiver and/or transmitter systems. */
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 384:	80 ea       	ldi	r24, 0xA0	; 160
 386:	99 e0       	ldi	r25, 0x09	; 9
 388:	28 e1       	ldi	r18, 0x18	; 24
 38a:	fc 01       	movw	r30, r24
 38c:	24 83       	std	Z+4, r18	; 0x04

  /* Enable interrupt (optional). */
	/* USARTD0.CTRLA = USART_RXCINTLVL_MED_gc; */
}
 38e:	00 00       	nop
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	08 95       	ret

00000396 <usartd0_out_char>:

void usartd0_out_char(char c)
{
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	1f 92       	push	r1
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
 3a0:	89 83       	std	Y+1, r24	; 0x01
	while(!(USARTD0.STATUS & USART_DREIF_bm));
 3a2:	00 00       	nop
 3a4:	80 ea       	ldi	r24, 0xA0	; 160
 3a6:	99 e0       	ldi	r25, 0x09	; 9
 3a8:	fc 01       	movw	r30, r24
 3aa:	81 81       	ldd	r24, Z+1	; 0x01
 3ac:	88 2f       	mov	r24, r24
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	80 72       	andi	r24, 0x20	; 32
 3b2:	99 27       	eor	r25, r25
 3b4:	89 2b       	or	r24, r25
 3b6:	b1 f3       	breq	.-20     	; 0x3a4 <usartd0_out_char+0xe>
	USARTD0.DATA = c;
 3b8:	80 ea       	ldi	r24, 0xA0	; 160
 3ba:	99 e0       	ldi	r25, 0x09	; 9
 3bc:	29 81       	ldd	r18, Y+1	; 0x01
 3be:	fc 01       	movw	r30, r24
 3c0:	20 83       	st	Z, r18
}
 3c2:	00 00       	nop
 3c4:	0f 90       	pop	r0
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	08 95       	ret

000003cc <_exit>:
 3cc:	f8 94       	cli

000003ce <__stop_program>:
 3ce:	ff cf       	rjmp	.-2      	; 0x3ce <__stop_program>
